/* The following code was generated by JFlex 1.7.0 */

package lexanalyzer;
import static lexanalyzer.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Obed/Documents/GitHub/lexAnalyzer/src/lexanalyzer/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\25\1\24\1\24\1\24\22\0\1\66\1\10\1\31"+
    "\1\23\1\0\1\3\1\12\1\32\1\17\1\20\1\7\1\4\1\3"+
    "\1\5\1\14\1\6\1\2\1\2\10\2\1\0\1\3\1\10\1\11"+
    "\1\10\1\0\1\3\1\36\1\52\1\45\1\37\1\41\1\62\1\55"+
    "\1\46\1\50\1\64\1\53\1\35\1\57\1\33\1\47\1\54\1\65"+
    "\1\42\1\44\1\40\1\34\1\60\1\56\1\63\1\43\1\51\1\15"+
    "\1\0\1\16\1\26\1\61\1\0\4\1\1\30\25\1\1\21\1\13"+
    "\1\22\7\0\1\24\32\0\1\24\u05bf\0\12\27\206\0\12\27\306\0"+
    "\12\27\u019c\0\12\27\166\0\12\27\166\0\12\27\166\0\12\27\166\0"+
    "\12\27\166\0\12\27\166\0\12\27\166\0\12\27\166\0\12\27\166\0"+
    "\12\27\140\0\12\27\166\0\12\27\106\0\12\27\u0116\0\12\27\106\0"+
    "\12\27\u05e6\0\1\24\u015f\0\12\27\46\0\12\27\u012c\0\12\27\200\0"+
    "\12\27\246\0\12\27\6\0\12\27\266\0\12\27\126\0\12\27\206\0"+
    "\12\27\6\0\12\27\u03a6\0\13\24\35\0\1\24\1\24\5\0\1\24"+
    "\57\0\1\24\u0fa0\0\1\24\u761f\0\12\27\u02a6\0\12\27\46\0\12\27"+
    "\306\0\12\27\26\0\12\27\126\0\12\27\u0196\0\12\27\u5316\0\12\27"+
    "\u0586\0\12\27\u0bbc\0\12\27\200\0\12\27\74\0\12\27\220\0\12\27"+
    "\u0116\0\12\27\u0156\0\12\27\166\0\12\27\u0176\0\12\27\146\0\12\27"+
    "\146\0\12\27\u01a6\0\12\27\u0366\0\12\27\u4e06\0\12\27\346\0\12\27"+
    "\u6c74\0\62\27\u1150\0\12\27\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\4\2\1\4\4\1\5"+
    "\3\1\30\2\1\3\1\0\1\5\1\6\1\7\2\0"+
    "\1\10\1\0\4\2\1\11\13\2\1\11\1\2\1\11"+
    "\17\2\1\11\40\2\1\11\1\2\1\11\3\2\2\11"+
    "\1\2\1\11\24\2\1\11\24\2\1\3\2\0\12\2"+
    "\1\11\12\2\1\11\10\2\1\11\20\2\1\11\26\2"+
    "\1\11\11\2\1\11\24\2\1\11\1\2\1\11\15\2"+
    "\1\11\23\2\1\11\12\2\1\11\2\2\1\5\1\12"+
    "\22\2\1\11\12\2\1\11\4\2\1\11\1\0\10\2"+
    "\1\11\36\2\1\11\15\2\2\11\21\2\1\11\4\2"+
    "\2\11\27\2\1\11\6\2\1\0\32\2\1\11\33\2"+
    "\1\11\15\2\1\0\1\11\46\2\1\0\4\2\1\11"+
    "\3\2\1\11\1\2\1\11\12\2\1\0\5\2\1\11"+
    "\6\2\1\11\4\2\1\11\1\0\11\2\1\0\10\2"+
    "\1\0\7\2\1\0\2\2\1\11\21\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[669];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\67\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u09e2\0\u0370\0\67\0\u03a7\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\156\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df"+
    "\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u1130\0\u2909"+
    "\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1"+
    "\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u25d0"+
    "\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322"+
    "\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da"+
    "\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692"+
    "\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a"+
    "\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02"+
    "\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba"+
    "\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72"+
    "\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a"+
    "\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2"+
    "\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a"+
    "\0\u42d1\0\u4308\0\u433f\0\u4376\0\67\0\u43ad\0\u43e4\0\u441b"+
    "\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3"+
    "\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b"+
    "\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943"+
    "\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb"+
    "\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c\0\u4cb3"+
    "\0\u4cea\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34\0\u4e6b"+
    "\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e\0\u4fb5\0\u4fec\0\u5023"+
    "\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u5136\0\u516d\0\u51a4\0\u51db"+
    "\0\u5212\0\u5249\0\u5280\0\u52b7\0\u52ee\0\u5325\0\u535c\0\u5393"+
    "\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6\0\u54dd\0\u5514\0\u554b"+
    "\0\u5582\0\u55b9\0\u55f0\0\u40ab\0\u5627\0\u565e\0\u5695\0\u56cc"+
    "\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816\0\u584d\0\u5884"+
    "\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce\0\u5a05\0\u5a3c"+
    "\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18\0\u5b4f\0\u5b86\0\u5bbd\0\u5bf4"+
    "\0\u5c2b\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e\0\u5d75\0\u5dac"+
    "\0\u5de3\0\u5e1a\0\u5e51\0\u5e88\0\u5ebf\0\u5ef6\0\u5f2d\0\u282d"+
    "\0\u5f64\0\u5f9b\0\u5fd2\0\u6009\0\u6040\0\u6077\0\u60ae\0\u60e5"+
    "\0\u611c\0\u6153\0\u618a\0\u61c1\0\u61f8\0\u622f\0\u6266\0\u629d"+
    "\0\u62d4\0\u630b\0\u6342\0\u6379\0\u63b0\0\u63e7\0\u641e\0\u6455"+
    "\0\u648c\0\u64c3\0\u64fa\0\u6531\0\u6568\0\u659f\0\u65d6\0\u660d"+
    "\0\u6644\0\u667b\0\u66b2\0\u66e9\0\u6720\0\u6757\0\u678e\0\u67c5"+
    "\0\u67fc\0\u6833\0\u686a\0\u68a1\0\u68d8\0\u690f\0\u6946\0\u697d"+
    "\0\u69b4\0\u69eb\0\u6a22\0\u3c5f\0\u6a59\0\u6a90\0\u6ac7\0\u6afe"+
    "\0\u6b35\0\u6b6c\0\u6ba3\0\u6bda\0\u6c11\0\u6c48\0\u6c7f\0\u6cb6"+
    "\0\u6ced\0\u6d24\0\u6d5b\0\u6d92\0\u6dc9\0\u6e00\0\u4489\0\u6e37"+
    "\0\u6e6e\0\u6ea5\0\u6edc\0\u6f13\0\u6f4a\0\u6f81\0\u6fb8\0\u6fef"+
    "\0\u7026\0\u705d\0\u7094\0\u70cb\0\u7102\0\u289b\0\u7139\0\u7170"+
    "\0\u71a7\0\u71de\0\u7215\0\u724c\0\u7283\0\u72ba\0\u72f1\0\u7328"+
    "\0\u735f\0\u7396\0\u73cd\0\u7404\0\u743b\0\u7472\0\u74a9\0\u74e0"+
    "\0\u7517\0\u754e\0\u7585\0\u75bc\0\u75f3\0\u762a\0\u7661\0\u7698"+
    "\0\u76cf\0\u7706\0\u773d\0\u7774\0\u77ab\0\u77e2\0\u7819\0\u7850"+
    "\0\u7887\0\u78be\0\u78f5\0\u792c\0\u7963\0\u799a\0\u79d1\0\u7a08"+
    "\0\u7a3f\0\u72ba\0\u7a76\0\u7aad\0\u3246\0\u7ae4\0\u7b1b\0\u2751"+
    "\0\u7b52\0\u7b89\0\u7bc0\0\u7bf7\0\u7c2e\0\u7c65\0\u1847\0\u7c9c"+
    "\0\u7cd3\0\u7d0a\0\u7d41\0\u7d78\0\u7daf\0\u7de6\0\u7e1d\0\u7e54"+
    "\0\67\0\u7e8b\0\u7ec2\0\u7ef9\0\u7f30\0\u7f67\0\u7f9e\0\u7fd5"+
    "\0\u800c\0\u8043\0\u807a\0\u80b1\0\u80e8\0\u811f\0\u8156\0\u818d"+
    "\0\u81c4\0\u81fb\0\u8232\0\u8269\0\u82a0\0\u82d7\0\u830e\0\u8345"+
    "\0\u837c\0\u83b3\0\u83ea\0\u8421\0\u8458\0\u848f\0\u84c6\0\u84fd"+
    "\0\u8534\0\u856b\0\u85a2\0\u85d9\0\u8610\0\u8647\0\u867e\0\u86b5"+
    "\0\u86ec\0\u8723\0\u875a\0\u8791\0\u87c8\0\u87ff\0\u8836\0\u886d"+
    "\0\u88a4\0\u88db\0\u8912\0\u8949\0\u8980\0\u7fd5\0\u89b7\0\u89ee"+
    "\0\u8a25\0\u8a5c\0\u8a93\0\u8aca\0\u8b01";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[669];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\5"+
    "\2\11\1\12\1\13\1\5\1\14\1\5\1\15\1\5"+
    "\1\16\1\5\1\17\2\20\1\21\1\2\1\3\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\3"+
    "\1\52\1\3\1\53\1\3\1\20\70\0\2\3\25\0"+
    "\1\3\2\0\33\3\3\0\1\4\11\0\1\54\13\0"+
    "\1\55\10\0\1\55\27\0\1\4\66\0\1\4\2\0"+
    "\1\56\70\0\1\57\70\0\1\5\67\0\1\5\67\0"+
    "\1\5\71\0\1\5\70\0\1\5\70\0\1\5\67\0"+
    "\1\5\67\0\2\20\40\0\1\20\2\0\1\60\1\0"+
    "\2\61\21\0\1\60\37\0\31\62\1\63\35\62\32\64"+
    "\1\63\34\64\1\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\65\1\3\1\66\2\3\1\67\3\3\1\70\1\3"+
    "\1\71\16\3\2\0\2\3\25\0\1\3\2\0\1\72"+
    "\10\3\1\73\7\3\1\74\11\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\75\2\3\1\76\5\3\1\77"+
    "\1\100\15\3\2\0\2\3\25\0\1\3\2\0\1\101"+
    "\1\102\1\103\1\3\1\104\1\105\1\3\1\106\1\3"+
    "\1\107\1\110\4\3\1\111\5\3\1\112\5\3\2\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\113\1\3\1\114"+
    "\2\3\1\115\1\116\4\3\1\117\1\120\1\3\1\121"+
    "\13\3\2\0\2\3\25\0\1\3\2\0\3\3\1\122"+
    "\2\3\1\123\1\124\1\3\1\125\1\3\1\126\1\127"+
    "\1\130\15\3\2\0\2\3\25\0\1\3\2\0\1\131"+
    "\1\3\1\132\4\3\1\133\1\3\1\134\16\3\1\135"+
    "\2\3\2\0\2\3\25\0\1\3\2\0\1\3\1\136"+
    "\1\3\1\137\2\3\1\140\5\3\1\141\1\142\15\3"+
    "\2\0\2\3\25\0\1\3\2\0\6\3\1\143\24\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\3\1\144\1\3"+
    "\1\145\1\3\1\146\1\147\1\3\1\150\1\3\1\151"+
    "\1\152\1\153\1\154\3\3\1\155\2\3\1\156\5\3"+
    "\1\157\2\0\2\3\25\0\1\3\2\0\1\3\1\160"+
    "\1\161\1\162\3\3\1\163\3\3\1\164\1\165\16\3"+
    "\2\0\2\3\25\0\1\3\2\0\3\3\1\166\10\3"+
    "\1\167\16\3\2\0\2\3\25\0\1\3\2\0\1\170"+
    "\1\171\5\3\1\172\2\3\1\173\6\3\1\174\3\3"+
    "\1\175\1\3\1\176\3\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\177\3\3\1\200\4\3\1\201\12\3\1\202"+
    "\2\3\1\105\3\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\203\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\204\1\3\1\205\2\3\1\206\1\207\1\105"+
    "\3\3\1\210\1\211\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\212\6\3\1\213\15\3\2\0\2\3"+
    "\25\0\1\3\2\0\1\3\1\214\1\215\1\216\2\3"+
    "\1\217\1\220\4\3\1\221\1\222\15\3\2\0\2\3"+
    "\25\0\1\3\2\0\2\3\1\223\3\3\1\224\1\225"+
    "\4\3\1\226\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\227\3\3\1\230\3\3\1\231\1\232\1\233"+
    "\15\3\2\0\2\3\25\0\1\3\2\0\3\3\1\234"+
    "\2\3\1\235\5\3\1\236\1\237\15\3\2\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\240\2\3\1\241\6\3"+
    "\1\242\15\3\2\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\243\1\244\1\245\2\3\1\246\1\247\4\3\1\250"+
    "\1\251\15\3\2\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\252\16\3\3\0\1\54\25\0\1\55\10\0\1\55"+
    "\27\0\1\253\1\0\2\254\61\0\25\56\1\0\41\56"+
    "\6\57\1\0\1\255\57\57\2\0\1\60\24\0\1\60"+
    "\40\0\2\3\25\0\1\3\2\0\2\3\1\256\21\3"+
    "\1\257\6\3\2\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\260\16\3\1\261\6\3\2\0\2\3\25\0\1\3"+
    "\2\0\30\3\1\224\2\3\2\0\2\3\25\0\1\3"+
    "\2\0\13\3\1\143\17\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\262\4\3\1\105\4\3\1\263\20\3\2\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\264\2\3\1\265"+
    "\1\266\11\3\2\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\267\2\3\1\270\6\3\1\271\15\3\2\0\2\3"+
    "\25\0\1\3\2\0\4\3\1\272\14\3\1\273\11\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\274\10\3\1\224"+
    "\21\3\2\0\2\3\25\0\1\3\2\0\3\3\1\275"+
    "\21\3\1\276\1\3\1\224\3\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\277\6\3\1\300\10\3\1\273"+
    "\7\3\2\0\2\3\25\0\1\3\2\0\1\301\17\3"+
    "\1\106\12\3\2\0\2\3\25\0\1\3\2\0\4\3"+
    "\1\105\3\3\1\105\22\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\302\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\303\2\3\1\273\25\3\2\0\2\3"+
    "\25\0\1\3\2\0\3\3\2\105\26\3\2\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\105\24\3\2\0\2\3"+
    "\25\0\1\3\2\0\11\3\1\304\1\105\20\3\2\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\305\25\3\2\0"+
    "\2\3\25\0\1\3\2\0\11\3\1\306\21\3\2\0"+
    "\2\3\25\0\1\3\2\0\22\3\1\105\10\3\2\0"+
    "\2\3\25\0\1\3\2\0\24\3\1\307\6\3\2\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\310\2\3\1\105"+
    "\22\3\2\0\2\3\25\0\1\3\2\0\1\212\1\3"+
    "\1\311\1\312\5\3\1\313\1\314\14\3\1\315\3\3"+
    "\2\0\2\3\25\0\1\3\2\0\14\3\1\307\16\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\3\1\316\22\3"+
    "\1\317\6\3\2\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\320\5\3\1\321\21\3\2\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\322\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\17\3\1\323\13\3\2\0\2\3\25\0\1\3"+
    "\2\0\24\3\1\324\3\3\1\325\2\3\2\0\2\3"+
    "\25\0\1\3\2\0\1\3\1\326\1\3\1\327\4\3"+
    "\1\330\4\3\1\331\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\332\24\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\333\24\3\2\0\2\3\25\0\1\3"+
    "\2\0\21\3\1\105\11\3\2\0\2\3\25\0\1\3"+
    "\2\0\24\3\1\334\6\3\2\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\335\26\3\2\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\106\21\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\336\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\337\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\340\1\341\3\3\1\342\2\3\1\343"+
    "\15\3\2\0\2\3\25\0\1\3\2\0\2\3\1\106"+
    "\30\3\2\0\2\3\25\0\1\3\2\0\15\3\1\344"+
    "\15\3\2\0\2\3\25\0\1\3\2\0\2\3\1\345"+
    "\1\346\1\3\1\347\3\3\1\350\1\351\6\3\1\352"+
    "\3\3\1\353\1\3\1\354\3\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\355\20\3\1\356\7\3\2\0"+
    "\2\3\25\0\1\3\2\0\22\3\1\357\10\3\2\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\360\27\3\2\0"+
    "\2\3\25\0\1\3\2\0\17\3\1\361\4\3\1\105"+
    "\6\3\2\0\2\3\25\0\1\3\2\0\25\3\1\106"+
    "\5\3\2\0\2\3\25\0\1\3\2\0\3\3\1\362"+
    "\27\3\2\0\2\3\25\0\1\3\2\0\2\3\1\363"+
    "\2\3\1\364\3\3\1\365\1\366\11\3\1\367\6\3"+
    "\2\0\2\3\25\0\1\3\2\0\11\3\1\370\21\3"+
    "\2\0\2\3\25\0\1\3\2\0\7\3\1\371\3\3"+
    "\1\372\17\3\2\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\373\31\3\2\0\2\3\25\0\1\3\2\0\24\3"+
    "\1\106\6\3\2\0\2\3\25\0\1\3\2\0\16\3"+
    "\1\106\14\3\2\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\374\27\3\2\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\375\27\3\2\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\376\30\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\377\23\3\2\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\u0100\12\3\1\132\16\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0101\3\3\1\u0102\21\3\2\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u0103\5\3\1\u0104\16\3"+
    "\2\0\2\3\25\0\1\3\2\0\3\3\1\u0105\2\3"+
    "\1\u0106\24\3\2\0\2\3\25\0\1\3\2\0\1\u0107"+
    "\1\u0108\1\u0109\1\u010a\3\3\1\u010b\14\3\1\u010c\6\3"+
    "\2\0\2\3\25\0\1\3\2\0\25\3\1\u010d\5\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\3\1\360\1\u010e"+
    "\30\3\2\0\2\3\25\0\1\3\2\0\2\3\1\212"+
    "\30\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u010f"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\4\3\1\273"+
    "\26\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u0110"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\5\3\1\305"+
    "\1\u0111\24\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u0112\24\3\2\0\2\3\25\0\1\3\2\0\27\3"+
    "\1\u0113\3\3\2\0\2\3\25\0\1\3\2\0\1\273"+
    "\3\3\1\u0114\1\u0115\3\3\1\u0116\1\u0117\2\3\1\u0118"+
    "\3\3\1\u0119\11\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u011a\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u011b\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\24\3\1\u011c\6\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\106\32\3\2\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u011d\30\3\2\0\2\3\25\0\1\3\2\0\12\3"+
    "\1\u011e\20\3\2\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\u011f\14\3\1\252\10\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0120\5\3\1\u0121\16\3\2\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u0122\25\3\2\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u0123\25\3\2\0\2\3"+
    "\25\0\1\3\2\0\10\3\1\105\22\3\2\0\2\3"+
    "\25\0\1\3\2\0\2\3\1\u0124\30\3\2\0\2\3"+
    "\25\0\1\3\2\0\17\3\1\u0125\13\3\2\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\333\27\3\2\0\2\3"+
    "\25\0\1\3\2\0\4\3\1\105\2\3\1\u0126\1\3"+
    "\1\u0127\21\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u0128\23\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u0129\5\3\1\u012a\1\u012b\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u012c\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\25\3\1\u012d\5\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u012e\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\105\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u0108\10\3\1\u012f\16\3\2\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u0130\25\3\2\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\u0131\15\3\2\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\u0132\15\3\2\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u0133\6\3\1\136"+
    "\15\3\2\0\2\3\25\0\1\3\2\0\7\3\1\u011d"+
    "\23\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u0134"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u0135"+
    "\22\3\1\105\2\3\2\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\267\23\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\210\3\3\1\u0136\26\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\u0137\32\3\2\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u0138\4\3\1\u0139\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\u013a\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u013b\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\u013c\1\3\1\u0124\30\3\2\0\2\3"+
    "\25\0\1\3\2\0\14\3\1\u013d\16\3\2\0\2\3"+
    "\25\0\1\3\2\0\2\3\1\u013e\30\3\2\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u0135\25\3\2\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u013f\5\3\1\u0140\16\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\3\1\u0141\5\3"+
    "\1\u0142\23\3\2\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u0143\4\3\1\u0144\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\333\15\3\3\0\1\253\72\0\1\u0145"+
    "\61\0\2\3\25\0\1\3\2\0\2\3\1\u0146\30\3"+
    "\2\0\2\3\25\0\1\3\2\0\6\3\1\u0147\24\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\3\1\u0148\13\3"+
    "\1\u0149\15\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u014a\24\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\105\3\3\1\u014b\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\13\3\1\u014c\17\3\2\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\333\15\3\1\u014d\2\0\2\3\25\0"+
    "\1\3\2\0\1\u014e\32\3\2\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\222\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\22\3\1\106\10\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\105\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\112\32\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0132\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\360\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\22\3\1\u014f\10\3\2\0\2\3\25\0\1\3\2\0"+
    "\4\3\1\u010d\26\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0124\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\4\3\1\105\26\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0124\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0150\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\13\3\1\u0151\17\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u0152\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0153\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\u0154\15\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u0155\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0156\2\3\1\105\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0157\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u0158\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\u0159\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u015a\12\3\1\u015b\15\3\2\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\u015c\2\3\1\u015d"+
    "\24\3\2\0\2\3\25\0\1\3\2\0\17\3\1\136"+
    "\13\3\2\0\2\3\25\0\1\3\2\0\3\3\1\252"+
    "\27\3\2\0\2\3\25\0\1\3\2\0\22\3\1\u015e"+
    "\10\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u015f"+
    "\4\3\1\u0160\5\3\1\105\12\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\105\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u0161\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\21\3\1\u0162\11\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0163\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\u0152\5\3\1\105\24\3\2\0\2\3"+
    "\25\0\1\3\2\0\1\u0164\14\3\1\u0165\15\3\2\0"+
    "\2\3\25\0\1\3\2\0\26\3\1\u0166\4\3\2\0"+
    "\2\3\25\0\1\3\2\0\22\3\1\u0167\1\3\1\105"+
    "\6\3\2\0\2\3\25\0\1\3\2\0\32\3\1\u0168"+
    "\2\0\2\3\25\0\1\3\2\0\1\105\32\3\2\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u0169\24\3\2\0"+
    "\2\3\2\0\1\u016a\22\0\1\3\2\0\33\3\2\0"+
    "\2\3\25\0\1\3\2\0\2\3\1\u016b\30\3\2\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\u016c\27\3\2\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u016d\1\u016e\23\3"+
    "\2\0\2\3\25\0\1\3\2\0\12\3\1\u0137\20\3"+
    "\2\0\2\3\25\0\1\3\2\0\6\3\1\u016f\24\3"+
    "\2\0\2\3\25\0\1\3\2\0\5\3\1\105\3\3"+
    "\1\u0170\21\3\2\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\u0171\21\3\2\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0172\27\3\2\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\105\1\3\1\u0173\26\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\u0174\31\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0175\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u0176\16\3\2\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u0177\30\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0178\5\3\1\u0179\16\3\2\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u017a\24\3\2\0\2\3"+
    "\25\0\1\3\2\0\2\3\1\u017b\30\3\2\0\2\3"+
    "\25\0\1\3\2\0\11\3\1\105\1\u017c\7\3\1\u017d"+
    "\10\3\2\0\2\3\25\0\1\3\2\0\13\3\1\224"+
    "\17\3\2\0\2\3\25\0\1\3\2\0\11\3\1\u017e"+
    "\21\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u017f"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\6\3\1\u0180"+
    "\24\3\2\0\2\3\25\0\1\3\2\0\1\3\1\u0181"+
    "\31\3\2\0\2\3\25\0\1\3\2\0\11\3\1\u0182"+
    "\21\3\2\0\2\3\25\0\1\3\2\0\1\3\1\u0183"+
    "\3\3\1\305\6\3\1\u0141\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u0184\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0185\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\213\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0186\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0187\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\106\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u0188\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0189\2\3\1\u018a\1\u018b\10\3"+
    "\1\u018c\7\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u018d\1\3\1\u018e\21\3\2\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u018f\21\3\2\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u0190\27\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\2\105\3\3\1\u0191\20\3\2\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\u0157\27\3\2\0\2\3"+
    "\25\0\1\3\2\0\11\3\1\u014a\21\3\2\0\2\3"+
    "\25\0\1\3\2\0\7\3\1\u0192\23\3\2\0\2\3"+
    "\25\0\1\3\2\0\12\3\1\u0193\20\3\2\0\2\3"+
    "\25\0\1\3\2\0\1\u0194\4\3\1\u0195\3\3\1\u0196"+
    "\13\3\1\u0197\5\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\224\32\3\2\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\u0198\1\u0199\30\3\2\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u019a\30\3\2\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u019b\23\3\2\0\2\3\25\0\1\3\2\0"+
    "\21\3\1\u019c\2\3\1\u019d\6\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\271\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\4\3\1\u019e\26\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\360\12\3\1\u0119\11\3\2\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u019f\24\3\2\0"+
    "\2\3\25\0\1\3\2\0\1\u01a0\32\3\2\0\2\3"+
    "\25\0\1\3\2\0\7\3\1\u01a1\23\3\2\0\2\3"+
    "\25\0\1\3\2\0\11\3\1\u01a2\21\3\2\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u01a3\6\3\1\u01a4\15\3"+
    "\2\0\2\3\25\0\1\3\2\0\6\3\1\u01a5\5\3"+
    "\1\105\16\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u01a6\24\3\2\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u01a7\30\3\2\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\u01a8\25\3\2\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\224\31\3\2\0\2\3\25\0\1\3\2\0\1\u01a9"+
    "\32\3\2\0\2\3\25\0\1\3\2\0\2\3\1\u01aa"+
    "\30\3\2\0\2\3\25\0\1\3\2\0\6\3\1\u01ab"+
    "\24\3\2\0\2\3\25\0\1\3\2\0\20\3\1\105"+
    "\12\3\2\0\2\3\25\0\1\3\2\0\20\3\1\u012f"+
    "\12\3\2\0\2\3\25\0\1\3\2\0\23\3\1\u01ac"+
    "\7\3\2\0\2\3\25\0\1\3\2\0\3\3\1\u011d"+
    "\27\3\2\0\2\3\25\0\1\3\2\0\23\3\1\132"+
    "\7\3\2\0\2\3\25\0\1\3\2\0\13\3\1\105"+
    "\17\3\2\0\2\3\25\0\1\3\2\0\26\3\1\u01ad"+
    "\4\3\2\0\2\3\25\0\1\3\2\0\2\3\1\105"+
    "\30\3\2\0\2\3\25\0\1\3\2\0\2\3\1\u01ae"+
    "\30\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u01af"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\12\3\1\300"+
    "\20\3\2\0\2\3\25\0\1\3\2\0\12\3\1\u01b0"+
    "\20\3\2\0\2\3\25\0\1\3\2\0\11\3\1\u01b1"+
    "\1\u01b2\6\3\1\u015a\11\3\2\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u01b3\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\224\13\3\1\360\7\3\1\u01b4\1\u01b5\5\3"+
    "\2\0\2\3\25\0\1\3\2\0\15\3\1\110\15\3"+
    "\2\0\2\3\25\0\1\3\2\0\14\3\1\224\16\3"+
    "\2\0\2\3\25\0\1\3\2\0\17\3\1\300\13\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\3\1\307\31\3"+
    "\2\0\2\3\25\0\1\3\2\0\14\3\1\105\16\3"+
    "\2\0\2\3\25\0\1\3\2\0\5\3\1\u01b6\25\3"+
    "\2\0\2\3\25\0\1\3\2\0\5\3\1\u01b7\25\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\u01b8\6\3\1\106"+
    "\23\3\2\0\2\3\25\0\1\3\2\0\13\3\1\u01b9"+
    "\17\3\2\0\2\3\25\0\1\3\2\0\12\3\1\u0122"+
    "\20\3\2\0\2\3\25\0\1\3\2\0\1\3\1\136"+
    "\31\3\2\0\2\3\25\0\1\3\2\0\1\3\1\u0157"+
    "\31\3\2\0\2\3\25\0\1\3\2\0\1\3\1\u01ba"+
    "\31\3\2\0\2\3\25\0\1\3\2\0\10\3\1\u010d"+
    "\1\3\1\70\20\3\2\0\2\3\25\0\1\3\2\0"+
    "\4\3\1\u01bb\26\3\2\0\2\3\25\0\1\3\2\0"+
    "\23\3\1\105\7\3\2\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\110\20\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\224\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\u0130\21\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u01bc\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\24\3\1\105\6\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\277\32\3\2\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\u01bd\1\u01be\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u01bf\3\3\1\105\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\224\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u01c0\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\u01ae\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\300\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u01c1\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\105\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u01c2\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u01c3\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\3\1\106\31\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u01c4\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\3\1\u01c5\31\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\u0130\32\3\2\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u01c6\16\3\2\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u0103\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\110\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\333\16\3\2\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u019c\30\3\2\0\2\3\25\0\1\3"+
    "\2\0\17\3\1\u01c7\13\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\106\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u01c8\30\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u01c9\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u01ca\27\3\2\0\2\3\25\0\1\3"+
    "\2\0\24\3\1\300\6\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\u01cb\31\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u01cc\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\u01cd\32\3\2\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u01ce\5\3\1\u01cf\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u01d0\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u01d1\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u01d2\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u01d3\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u01d4\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u010d\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\u01d5\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\22\3\1\273\10\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\3\1\300\31\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u01d6\4\3\1\u01d7\14\3\42\0"+
    "\1\u01d8\26\0\2\3\25\0\1\3\2\0\25\3\1\u0124"+
    "\5\3\2\0\2\3\25\0\1\3\2\0\21\3\1\106"+
    "\11\3\2\0\2\3\25\0\1\3\2\0\7\3\1\u01c1"+
    "\23\3\2\0\2\3\25\0\1\3\2\0\3\3\1\u0180"+
    "\27\3\2\0\2\3\25\0\1\3\2\0\21\3\1\u01d9"+
    "\11\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u014a"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\6\3\1\u0189"+
    "\24\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u01da"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u01db"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\7\3\1\333"+
    "\23\3\2\0\2\3\25\0\1\3\2\0\7\3\1\u01dc"+
    "\4\3\1\u01ca\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\u01dd\32\3\2\0\2\3\25\0\1\3\2\0\15\3"+
    "\1\u01de\15\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\224\23\3\2\0\2\3\25\0\1\3\2\0\20\3"+
    "\1\106\12\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u01df\23\3\2\0\2\3\25\0\1\3\2\0\17\3"+
    "\1\u01e0\13\3\2\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u01e1\16\3\2\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\u01e2\31\3\2\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\u01e3\25\3\2\0\2\3\25\0\1\3\2\0\15\3"+
    "\1\u01e4\15\3\2\0\2\3\25\0\1\3\2\0\12\3"+
    "\1\224\20\3\2\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\273\21\3\2\0\2\3\25\0\1\3\2\0\15\3"+
    "\1\u01e5\15\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u01e6\23\3\2\0\2\3\25\0\1\3\2\0\1\u01e7"+
    "\32\3\2\0\2\3\25\0\1\3\2\0\6\3\1\u01e8"+
    "\24\3\2\0\2\3\25\0\1\3\2\0\24\3\1\u01e9"+
    "\6\3\2\0\2\3\25\0\1\3\2\0\4\3\1\u014e"+
    "\26\3\2\0\2\3\25\0\1\3\2\0\2\3\1\u01ea"+
    "\30\3\2\0\2\3\25\0\1\3\2\0\7\3\1\u01eb"+
    "\23\3\2\0\2\3\25\0\1\3\2\0\5\3\1\u0103"+
    "\25\3\2\0\2\3\25\0\1\3\2\0\3\3\1\105"+
    "\10\3\1\u01ec\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u01ed\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u01ee\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\360\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u01ef\25\3\2\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u01f0\30\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u01f1\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u01f2\22\3\1\u01ad\4\3\2\0\2\3\25\0"+
    "\1\3\2\0\20\3\1\u01f3\12\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u01f4\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u01f5\11\3\1\u01f6\15\3\2\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u01f7\25\3\2\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u0178\24\3\2\0"+
    "\2\3\25\0\1\3\2\0\24\3\1\333\6\3\2\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\u01f8\27\3\2\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u01f9\24\3\2\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u01fa\24\3\2\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\224\15\3\2\0"+
    "\2\3\25\0\1\3\2\0\2\3\1\u01fb\30\3\2\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u01fc\25\3\2\0"+
    "\2\3\25\0\1\3\2\0\4\3\1\u01fd\2\3\1\u01fe"+
    "\22\3\1\u01ff\2\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u0200\30\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u0170\24\3\2\0\2\3\25\0\1\3\2\0\30\3"+
    "\1\105\2\3\2\0\2\3\25\0\1\3\2\0\12\3"+
    "\1\u0201\20\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u0202\12\3\1\273\10\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\u0203\6\3\1\224\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\3\1\u01ec\31\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0204\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0205\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\110\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\4\3\1\u0206\26\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\126\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u0207\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\322\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\300\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0108\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0208\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0209\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u020a\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u020b\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u020c\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\27\3\1\u018e\3\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0173\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u020d\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u020e\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u020f\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u0210\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0211\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\215\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0212\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\27\3\1\u0213\3\3\2\0\2\3\25\0"+
    "\1\3\2\0\27\3\1\105\3\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\300\32\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\u0100\31\3\2\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u011d\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\23\3\1\333\7\3\2\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\267\27\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u0214\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\132\27\3\2\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0215\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\106\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\224\30\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u0216\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u01e4\16\3\2\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0217\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\u0180\32\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\u0218\32\3\2\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\u0219\21\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u01b4\23\3\2\0\2\3\25\0\1\3\2\0\15\3"+
    "\1\154\15\3\2\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u0199\1\u013c\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u021a\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u021b\25\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u021c\16\3\64\0\1\u021d\4\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u021e\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\145\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\67\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0180\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\27\3\1\u021f\3\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\u01aa\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0220\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u01c3\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\3\1\u0108\31\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0221\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\u010d\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u0222\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u0223\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0224\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0225\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\24\3\1\u0226\6\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\105\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0108\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\u018e\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\4\3\1\106\26\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\u0227\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\u0228\32\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0229\24\3\2\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\112\16\3\2\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\u022a\26\3\2\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u022b\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\21\3\1\u022c\11\3\2\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u01d9\20\3\2\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u022d\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\u014d\32\3\2\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u022e\23\3\2\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u022f\25\3\2\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\374\21\3\2\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\u0230\21\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u01c3\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0231\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u0232\16\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\u0233\31\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0234\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0235\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\363\13\3\1\300\5\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u0236\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u0237\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0238\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0103\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0239\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\145\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\305\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\4\3\1\u023a\26\3\2\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\212\23\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u023b\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\25\3\1\273\5\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\u023c\32\3\2\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\u023d\26\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u023e\24\3\2\0\2\3\25\0\1\3"+
    "\2\0\22\3\1\333\10\3\2\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u023f\27\3\2\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0240\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\17\3\1\106\1\3\1\u0235\11\3\2\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\316\2\3\1\277\24\3"+
    "\2\0\2\3\25\0\1\3\2\0\17\3\1\u0241\13\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\363\32\3\2\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\u0242\27\3\2\0"+
    "\2\3\25\0\1\3\2\0\1\u0243\32\3\2\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\113\27\3\2\0\2\3"+
    "\25\0\1\3\2\0\1\u0244\32\3\42\0\1\u0245\26\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\u0246\15\3\2\0"+
    "\2\3\25\0\1\3\2\0\1\u0247\32\3\2\0\2\3"+
    "\25\0\1\3\2\0\4\3\1\u0248\26\3\2\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u0249\25\3\2\0\2\3"+
    "\25\0\1\3\2\0\1\u024a\32\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u024b\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u024c\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\26\3\1\u024d\4\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\u010d\32\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u024e\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u024f\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0250\24\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0251\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u01ea\16\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\u0252\32\3\2\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0253\27\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\105\6\3\1\u0154\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\21\3\1\u0254\11\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0255\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\23\3\1\u0256\7\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u020b\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\21\3\1\u014a\11\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u018e\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0172\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u0257\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0258\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\1\u0259\32\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\u01ca\31\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u025a\24\3\2\0\2\3\25\0\1\3"+
    "\2\0\33\3\1\u025b\1\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u025c\24\3\2\0\2\3\25\0\1\3\2\0"+
    "\30\3\1\u025d\2\3\2\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\u0235\20\3\2\0\2\3\25\0\1\3\2\0"+
    "\16\3\1\u01aa\14\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\u025e\31\3\2\0\2\3\25\0\1\3\2\0"+
    "\24\3\1\u025f\6\3\2\0\2\3\25\0\1\3\2\0"+
    "\25\3\1\u0197\5\3\2\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0260\24\3\46\0\1\u0261\22\0\2\3\25\0"+
    "\1\3\2\0\22\3\1\u023a\10\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\261\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\u0262\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0263\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\10\3\1\u0264\22\3\2\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\u0265\20\3\2\0\2\3\25\0"+
    "\1\3\2\0\26\3\1\u0266\4\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\277\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0267\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u0268\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u0269\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u026a\16\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u026b\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u026c\21\3\2\0\2\3\25\0"+
    "\1\3\2\0\10\3\1\u026d\22\3\2\0\2\3\25\0"+
    "\1\3\2\0\22\3\1\210\10\3\2\0\2\3\25\0"+
    "\1\3\2\0\22\3\1\261\10\3\56\0\1\u026e\12\0"+
    "\2\3\25\0\1\3\2\0\7\3\1\u0130\23\3\2\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u0268\25\3\2\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u024f\25\3\2\0"+
    "\2\3\25\0\1\3\2\0\21\3\1\136\11\3\2\0"+
    "\2\3\25\0\1\3\2\0\26\3\1\u026f\4\3\2\0"+
    "\2\3\25\0\1\3\2\0\14\3\1\u0124\16\3\2\0"+
    "\2\3\25\0\1\3\2\0\12\3\1\u014a\20\3\2\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\u0270\27\3\2\0"+
    "\2\3\25\0\1\3\2\0\11\3\1\u0271\6\3\1\u0272"+
    "\12\3\2\0\2\3\25\0\1\3\2\0\1\3\1\u0181"+
    "\2\3\1\u0103\1\u0273\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u0123\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0274\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\1\u0275\32\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\275\32\3\2\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\u0276\21\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\224\24\3\2\0\2\3\25\0\1\3\2\0\12\3"+
    "\1\u0262\13\3\1\u0277\4\3\43\0\1\u0278\25\0\2\3"+
    "\25\0\1\3\2\0\13\3\1\u0279\10\3\1\u027a\6\3"+
    "\2\0\2\3\25\0\1\3\2\0\1\3\1\u027b\31\3"+
    "\2\0\2\3\25\0\1\3\2\0\15\3\1\u027c\15\3"+
    "\2\0\2\3\25\0\1\3\2\0\6\3\1\u027d\24\3"+
    "\2\0\2\3\25\0\1\3\2\0\15\3\1\u027e\15\3"+
    "\2\0\2\3\25\0\1\3\2\0\3\3\1\316\27\3"+
    "\2\0\2\3\25\0\1\3\2\0\5\3\1\u020f\25\3"+
    "\2\0\2\3\25\0\1\3\2\0\14\3\1\u027f\16\3"+
    "\2\0\2\3\25\0\1\3\2\0\15\3\1\u0280\15\3"+
    "\50\0\1\u0281\20\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u0282\16\3\2\0\2\3\25\0\1\3\2\0\15\3"+
    "\1\u0283\15\3\2\0\2\3\25\0\1\3\2\0\4\3"+
    "\1\u019d\26\3\2\0\2\3\25\0\1\3\2\0\24\3"+
    "\1\u0284\6\3\2\0\2\3\25\0\1\3\2\0\10\3"+
    "\1\u0285\22\3\2\0\2\3\25\0\1\3\2\0\24\3"+
    "\1\u0286\6\3\2\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\u0287\31\3\2\0\2\3\25\0\1\3\2\0\1\u0288"+
    "\32\3\35\0\1\u0289\33\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\360\31\3\2\0\2\3\25\0\1\3\2\0"+
    "\1\u019c\32\3\2\0\2\3\25\0\1\3\2\0\15\3"+
    "\1\u028a\15\3\2\0\2\3\25\0\1\3\2\0\21\3"+
    "\1\u028b\11\3\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u028c\24\3\2\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\374\23\3\2\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\u0197\21\3\55\0\1\u0261\13\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u028d\30\3\2\0\2\3\25\0\1\3"+
    "\2\0\13\3\1\u028e\17\3\2\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u01d6\21\3\2\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u028f\27\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u0290\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u0291\23\3\2\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u0292\27\3\2\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0293\15\3\2\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u0294\21\3\2\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0295\25\3\2\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0296\24\3\2\0\2\3\25\0\1\3"+
    "\2\0\10\3\1\u0297\22\3\2\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\u0298\1\u0274\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0299\24\3\2\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u029a\25\3\2\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u029b\27\3\2\0\2\3\25\0"+
    "\1\3\2\0\15\3\1\u029c\15\3\2\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u029d\30\3\2\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u0296\21\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\47\1\1\0\3\1\2\0"+
    "\1\11\1\0\167\1\2\0\227\1\1\11\44\1\1\0"+
    "\155\1\1\0\104\1\1\0\47\1\1\0\25\1\1\0"+
    "\5\1\1\11\14\1\1\0\11\1\1\0\10\1\1\0"+
    "\7\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[669];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int col;
    public int line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 420) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return ERROR;
            } 
            // fall through
          case 11: break;
          case 2: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Identificador;
            } 
            // fall through
          case 12: break;
          case 3: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Decimal;
            } 
            // fall through
          case 13: break;
          case 4: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Operador;
            } 
            // fall through
          case 14: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 15: break;
          case 6: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Comentario_Incompleto;
            } 
            // fall through
          case 16: break;
          case 7: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Entero;
            } 
            // fall through
          case 17: break;
          case 8: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return String;
            } 
            // fall through
          case 18: break;
          case 9: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Reservadas;
            } 
            // fall through
          case 19: break;
          case 10: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Boolean;
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
