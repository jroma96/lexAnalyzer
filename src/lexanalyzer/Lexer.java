/* The following code was generated by JFlex 1.7.0 */

package lexanalyzer;
import static lexanalyzer.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Obed/Documents/GitHub/lexAnalyzer/src/lexanalyzer/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\25\1\67\1\67\1\24\22\0\1\66\1\10\1\31"+
    "\1\23\1\0\1\7\1\12\1\32\1\17\1\20\1\6\1\3\1\7"+
    "\1\4\1\14\1\5\1\2\1\2\10\2\1\0\1\7\1\10\1\11"+
    "\1\10\1\0\1\7\1\36\1\52\1\45\1\37\1\41\1\62\1\55"+
    "\1\46\1\50\1\64\1\53\1\35\1\57\1\33\1\47\1\54\1\65"+
    "\1\42\1\44\1\40\1\34\1\60\1\56\1\63\1\43\1\51\1\15"+
    "\1\0\1\16\1\26\1\61\1\0\4\1\1\30\25\1\1\21\1\13"+
    "\1\22\7\0\1\67\u05da\0\12\27\206\0\12\27\306\0\12\27\u019c\0"+
    "\12\27\166\0\12\27\166\0\12\27\166\0\12\27\166\0\12\27\166\0"+
    "\12\27\166\0\12\27\166\0\12\27\166\0\12\27\166\0\12\27\140\0"+
    "\12\27\166\0\12\27\106\0\12\27\u0116\0\12\27\106\0\12\27\u0746\0"+
    "\12\27\46\0\12\27\u012c\0\12\27\200\0\12\27\246\0\12\27\6\0"+
    "\12\27\266\0\12\27\126\0\12\27\206\0\12\27\6\0\12\27\u03ce\0"+
    "\1\67\1\67\u85f6\0\12\27\u02a6\0\12\27\46\0\12\27\306\0\12\27"+
    "\26\0\12\27\126\0\12\27\u0196\0\12\27\u5316\0\12\27\u0586\0\12\27"+
    "\u0bbc\0\12\27\200\0\12\27\74\0\12\27\220\0\12\27\u0116\0\12\27"+
    "\u0156\0\12\27\166\0\12\27\u0176\0\12\27\146\0\12\27\146\0\12\27"+
    "\u01a6\0\12\27\u0366\0\12\27\u4e06\0\12\27\346\0\12\27\u6c74\0\62\27"+
    "\u1150\0\12\27\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\4\2\1\4\4\1\5"+
    "\3\1\30\2\1\3\1\0\1\6\1\7\1\10\2\0"+
    "\1\11\1\0\1\11\4\2\1\12\13\2\1\12\1\2"+
    "\1\12\17\2\1\12\40\2\1\12\1\2\1\12\3\2"+
    "\2\12\1\2\1\12\24\2\1\12\24\2\1\3\2\0"+
    "\12\2\1\12\12\2\1\12\10\2\1\12\20\2\1\12"+
    "\26\2\1\12\11\2\1\12\24\2\1\12\1\2\1\12"+
    "\15\2\1\12\23\2\1\12\12\2\1\12\2\2\1\6"+
    "\1\13\22\2\1\12\12\2\1\12\4\2\1\12\1\0"+
    "\10\2\1\12\36\2\1\12\15\2\2\12\21\2\1\12"+
    "\4\2\2\12\27\2\1\12\6\2\1\0\32\2\1\12"+
    "\33\2\1\12\15\2\1\0\1\12\46\2\1\0\4\2"+
    "\1\12\3\2\1\12\1\2\1\12\12\2\1\0\5\2"+
    "\1\12\6\2\1\12\4\2\1\12\1\0\11\2\1\0"+
    "\10\2\1\0\7\2\1\0\2\2\1\12\21\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[670];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\70"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a10\0\u0380\0\u0380\0\u03b8\0\u03b8\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\160\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500"+
    "\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u23e0\0\u2418\0\u2450\0\u2488"+
    "\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648"+
    "\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u1180"+
    "\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50"+
    "\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10"+
    "\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0"+
    "\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090"+
    "\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250"+
    "\0\u2680\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8"+
    "\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598"+
    "\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758"+
    "\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918"+
    "\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8"+
    "\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58"+
    "\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018"+
    "\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8"+
    "\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398"+
    "\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\70\0\u44e8\0\u4520"+
    "\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0"+
    "\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0"+
    "\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u4a60"+
    "\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8\0\u4c20"+
    "\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0"+
    "\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0"+
    "\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160"+
    "\0\u5198\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0\0\u52e8\0\u5320"+
    "\0\u5358\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0"+
    "\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630\0\u5668\0\u56a0"+
    "\0\u56d8\0\u5710\0\u5748\0\u5780\0\u41d8\0\u57b8\0\u57f0\0\u5828"+
    "\0\u5860\0\u5898\0\u58d0\0\u5908\0\u5940\0\u5978\0\u59b0\0\u59e8"+
    "\0\u5a20\0\u5a58\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8"+
    "\0\u5be0\0\u5c18\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68"+
    "\0\u5da0\0\u5dd8\0\u5e10\0\u5e48\0\u5e80\0\u5eb8\0\u5ef0\0\u5f28"+
    "\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u6040\0\u6078\0\u60b0\0\u60e8"+
    "\0\u28e8\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200\0\u6238\0\u6270"+
    "\0\u62a8\0\u62e0\0\u6318\0\u6350\0\u6388\0\u63c0\0\u63f8\0\u6430"+
    "\0\u6468\0\u64a0\0\u64d8\0\u6510\0\u6548\0\u6580\0\u65b8\0\u65f0"+
    "\0\u6628\0\u6660\0\u6698\0\u66d0\0\u6708\0\u6740\0\u6778\0\u67b0"+
    "\0\u67e8\0\u6820\0\u6858\0\u6890\0\u68c8\0\u6900\0\u6938\0\u6970"+
    "\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\u6ac0\0\u6af8\0\u6b30"+
    "\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10\0\u3d78\0\u6c48\0\u6c80\0\u6cb8"+
    "\0\u6cf0\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08\0\u6e40\0\u6e78"+
    "\0\u6eb0\0\u6ee8\0\u6f20\0\u6f58\0\u6f90\0\u6fc8\0\u7000\0\u45c8"+
    "\0\u7038\0\u7070\0\u70a8\0\u70e0\0\u7118\0\u7150\0\u7188\0\u71c0"+
    "\0\u71f8\0\u7230\0\u7268\0\u72a0\0\u72d8\0\u7310\0\u2958\0\u7348"+
    "\0\u7380\0\u73b8\0\u73f0\0\u7428\0\u7460\0\u7498\0\u74d0\0\u7508"+
    "\0\u7540\0\u7578\0\u75b0\0\u75e8\0\u7620\0\u7658\0\u7690\0\u76c8"+
    "\0\u7700\0\u7738\0\u7770\0\u77a8\0\u77e0\0\u7818\0\u7850\0\u7888"+
    "\0\u78c0\0\u78f8\0\u7930\0\u7968\0\u79a0\0\u79d8\0\u7a10\0\u7a48"+
    "\0\u7a80\0\u7ab8\0\u7af0\0\u7b28\0\u7b60\0\u7b98\0\u7bd0\0\u7c08"+
    "\0\u7c40\0\u7c78\0\u74d0\0\u7cb0\0\u7ce8\0\u3330\0\u7d20\0\u7d58"+
    "\0\u2808\0\u7d90\0\u7dc8\0\u7e00\0\u7e38\0\u7e70\0\u7ea8\0\u18b8"+
    "\0\u7ee0\0\u7f18\0\u7f50\0\u7f88\0\u7fc0\0\u7ff8\0\u8030\0\u8068"+
    "\0\u80a0\0\70\0\u80d8\0\u8110\0\u8148\0\u8180\0\u81b8\0\u81f0"+
    "\0\u8228\0\u8260\0\u8298\0\u82d0\0\u8308\0\u8340\0\u8378\0\u83b0"+
    "\0\u83e8\0\u8420\0\u8458\0\u8490\0\u84c8\0\u8500\0\u8538\0\u8570"+
    "\0\u85a8\0\u85e0\0\u8618\0\u8650\0\u8688\0\u86c0\0\u86f8\0\u8730"+
    "\0\u8768\0\u87a0\0\u87d8\0\u8810\0\u8848\0\u8880\0\u88b8\0\u88f0"+
    "\0\u8928\0\u8960\0\u8998\0\u89d0\0\u8a08\0\u8a40\0\u8a78\0\u8ab0"+
    "\0\u8ae8\0\u8b20\0\u8b58\0\u8b90\0\u8bc8\0\u8c00\0\u8228\0\u8c38"+
    "\0\u8c70\0\u8ca8\0\u8ce0\0\u8d18\0\u8d50\0\u8d88";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[670];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\2\11"+
    "\1\12\1\13\1\10\1\14\1\10\1\15\1\10\1\16"+
    "\1\10\1\17\2\20\1\21\1\2\1\3\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\3\1\52"+
    "\1\3\1\53\1\3\1\2\72\0\2\3\25\0\1\3"+
    "\2\0\33\3\4\0\1\4\11\0\1\54\13\0\1\55"+
    "\10\0\1\55\30\0\1\4\67\0\1\4\1\0\1\56"+
    "\71\0\1\57\72\0\1\10\70\0\1\10\70\0\1\10"+
    "\72\0\1\10\71\0\1\10\71\0\1\10\70\0\1\10"+
    "\70\0\2\20\44\0\1\60\2\61\22\0\1\60\40\0"+
    "\25\62\1\0\3\62\1\63\36\62\25\64\1\0\4\64"+
    "\1\65\35\64\1\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\66\1\3\1\67\2\3\1\70\3\3\1\71\1\3"+
    "\1\72\16\3\3\0\2\3\25\0\1\3\2\0\1\73"+
    "\10\3\1\74\7\3\1\75\11\3\3\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\76\2\3\1\77\5\3\1\100"+
    "\1\101\15\3\3\0\2\3\25\0\1\3\2\0\1\102"+
    "\1\103\1\104\1\3\1\105\1\106\1\3\1\107\1\3"+
    "\1\110\1\111\4\3\1\112\5\3\1\113\5\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\114\1\3\1\115"+
    "\2\3\1\116\1\117\4\3\1\120\1\121\1\3\1\122"+
    "\13\3\3\0\2\3\25\0\1\3\2\0\3\3\1\123"+
    "\2\3\1\124\1\125\1\3\1\126\1\3\1\127\1\130"+
    "\1\131\15\3\3\0\2\3\25\0\1\3\2\0\1\132"+
    "\1\3\1\133\4\3\1\134\1\3\1\135\16\3\1\136"+
    "\2\3\3\0\2\3\25\0\1\3\2\0\1\3\1\137"+
    "\1\3\1\140\2\3\1\141\5\3\1\142\1\143\15\3"+
    "\3\0\2\3\25\0\1\3\2\0\6\3\1\144\24\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\3\1\145\1\3"+
    "\1\146\1\3\1\147\1\150\1\3\1\151\1\3\1\152"+
    "\1\153\1\154\1\155\3\3\1\156\2\3\1\157\5\3"+
    "\1\160\3\0\2\3\25\0\1\3\2\0\1\3\1\161"+
    "\1\162\1\163\3\3\1\164\3\3\1\165\1\166\16\3"+
    "\3\0\2\3\25\0\1\3\2\0\3\3\1\167\10\3"+
    "\1\170\16\3\3\0\2\3\25\0\1\3\2\0\1\171"+
    "\1\172\5\3\1\173\2\3\1\174\6\3\1\175\3\3"+
    "\1\176\1\3\1\177\3\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\200\3\3\1\201\4\3\1\202\12\3\1\203"+
    "\2\3\1\106\3\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\204\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\205\1\3\1\206\2\3\1\207\1\210\1\106"+
    "\3\3\1\211\1\212\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\213\6\3\1\214\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\1\3\1\215\1\216\1\217\2\3"+
    "\1\220\1\221\4\3\1\222\1\223\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\2\3\1\224\3\3\1\225\1\226"+
    "\4\3\1\227\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\230\3\3\1\231\3\3\1\232\1\233\1\234"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\3\3\1\235"+
    "\2\3\1\236\5\3\1\237\1\240\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\241\2\3\1\242\6\3"+
    "\1\243\15\3\3\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\244\1\245\1\246\2\3\1\247\1\250\4\3\1\251"+
    "\1\252\15\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\253\16\3\4\0\1\54\25\0\1\55\10\0\1\55"+
    "\30\0\1\254\2\255\63\0\25\56\1\0\42\56\5\57"+
    "\1\0\1\256\61\57\2\0\1\60\24\0\1\60\41\0"+
    "\2\3\25\0\1\3\2\0\2\3\1\257\21\3\1\260"+
    "\6\3\3\0\2\3\25\0\1\3\2\0\5\3\1\261"+
    "\16\3\1\262\6\3\3\0\2\3\25\0\1\3\2\0"+
    "\30\3\1\225\2\3\3\0\2\3\25\0\1\3\2\0"+
    "\13\3\1\144\17\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\263\4\3\1\106\4\3\1\264\20\3\3\0\2\3"+
    "\25\0\1\3\2\0\15\3\1\265\2\3\1\266\1\267"+
    "\11\3\3\0\2\3\25\0\1\3\2\0\3\3\1\270"+
    "\2\3\1\271\6\3\1\272\15\3\3\0\2\3\25\0"+
    "\1\3\2\0\4\3\1\273\14\3\1\274\11\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\275\10\3\1\225\21\3"+
    "\3\0\2\3\25\0\1\3\2\0\3\3\1\276\21\3"+
    "\1\277\1\3\1\225\3\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\300\6\3\1\301\10\3\1\274\7\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\302\17\3\1\107"+
    "\12\3\3\0\2\3\25\0\1\3\2\0\4\3\1\106"+
    "\3\3\1\106\22\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\303\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\304\2\3\1\274\25\3\3\0\2\3\25\0"+
    "\1\3\2\0\3\3\2\106\26\3\3\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\106\24\3\3\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\305\1\106\20\3\3\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\306\25\3\3\0\2\3"+
    "\25\0\1\3\2\0\11\3\1\307\21\3\3\0\2\3"+
    "\25\0\1\3\2\0\22\3\1\106\10\3\3\0\2\3"+
    "\25\0\1\3\2\0\24\3\1\310\6\3\3\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\311\2\3\1\106\22\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\213\1\3\1\312"+
    "\1\313\5\3\1\314\1\315\14\3\1\316\3\3\3\0"+
    "\2\3\25\0\1\3\2\0\14\3\1\310\16\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\317\22\3\1\320"+
    "\6\3\3\0\2\3\25\0\1\3\2\0\3\3\1\321"+
    "\5\3\1\322\21\3\3\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\323\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\17\3\1\324\13\3\3\0\2\3\25\0\1\3\2\0"+
    "\24\3\1\325\3\3\1\326\2\3\3\0\2\3\25\0"+
    "\1\3\2\0\1\3\1\327\1\3\1\330\4\3\1\331"+
    "\4\3\1\332\15\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\333\24\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\334\24\3\3\0\2\3\25\0\1\3\2\0"+
    "\21\3\1\106\11\3\3\0\2\3\25\0\1\3\2\0"+
    "\24\3\1\335\6\3\3\0\2\3\25\0\1\3\2\0"+
    "\4\3\1\336\26\3\3\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\107\21\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\337\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\340\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\341\1\342\3\3\1\343\2\3\1\344\15\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\107\30\3"+
    "\3\0\2\3\25\0\1\3\2\0\15\3\1\345\15\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\346\1\347"+
    "\1\3\1\350\3\3\1\351\1\352\6\3\1\353\3\3"+
    "\1\354\1\3\1\355\3\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\356\20\3\1\357\7\3\3\0\2\3"+
    "\25\0\1\3\2\0\22\3\1\360\10\3\3\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\361\27\3\3\0\2\3"+
    "\25\0\1\3\2\0\17\3\1\362\4\3\1\106\6\3"+
    "\3\0\2\3\25\0\1\3\2\0\25\3\1\107\5\3"+
    "\3\0\2\3\25\0\1\3\2\0\3\3\1\363\27\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\364\2\3"+
    "\1\365\3\3\1\366\1\367\11\3\1\370\6\3\3\0"+
    "\2\3\25\0\1\3\2\0\11\3\1\371\21\3\3\0"+
    "\2\3\25\0\1\3\2\0\7\3\1\372\3\3\1\373"+
    "\17\3\3\0\2\3\25\0\1\3\2\0\1\3\1\374"+
    "\31\3\3\0\2\3\25\0\1\3\2\0\24\3\1\107"+
    "\6\3\3\0\2\3\25\0\1\3\2\0\16\3\1\107"+
    "\14\3\3\0\2\3\25\0\1\3\2\0\3\3\1\375"+
    "\27\3\3\0\2\3\25\0\1\3\2\0\3\3\1\376"+
    "\27\3\3\0\2\3\25\0\1\3\2\0\2\3\1\377"+
    "\30\3\3\0\2\3\25\0\1\3\2\0\7\3\1\u0100"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\1\3\1\u0101"+
    "\12\3\1\133\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u0102\3\3\1\u0103\21\3\3\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0104\5\3\1\u0105\16\3\3\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\u0106\2\3\1\u0107"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\1\u0108\1\u0109"+
    "\1\u010a\1\u010b\3\3\1\u010c\14\3\1\u010d\6\3\3\0"+
    "\2\3\25\0\1\3\2\0\25\3\1\u010e\5\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\361\1\u010f\30\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\213\30\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u0110\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\4\3\1\274\26\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u0111\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\306\1\u0112"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\6\3\1\u0113"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\27\3\1\u0114"+
    "\3\3\3\0\2\3\25\0\1\3\2\0\1\274\3\3"+
    "\1\u0115\1\u0116\3\3\1\u0117\1\u0118\2\3\1\u0119\3\3"+
    "\1\u011a\11\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u011b\24\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u011c\16\3\3\0\2\3\25\0\1\3\2\0\24\3"+
    "\1\u011d\6\3\3\0\2\3\25\0\1\3\2\0\1\107"+
    "\32\3\3\0\2\3\25\0\1\3\2\0\2\3\1\u011e"+
    "\30\3\3\0\2\3\25\0\1\3\2\0\12\3\1\u011f"+
    "\20\3\3\0\2\3\25\0\1\3\2\0\5\3\1\u0120"+
    "\14\3\1\253\10\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0121\5\3\1\u0122\16\3\3\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0123\25\3\3\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0124\25\3\3\0\2\3\25\0"+
    "\1\3\2\0\10\3\1\106\22\3\3\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u0125\30\3\3\0\2\3\25\0"+
    "\1\3\2\0\17\3\1\u0126\13\3\3\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\334\27\3\3\0\2\3\25\0"+
    "\1\3\2\0\4\3\1\106\2\3\1\u0127\1\3\1\u0128"+
    "\21\3\3\0\2\3\25\0\1\3\2\0\7\3\1\u0129"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\6\3\1\u012a"+
    "\5\3\1\u012b\1\u012c\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u012d\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\25\3\1\u012e\5\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u012f\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\106\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u0109\10\3\1\u0130\16\3\3\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u0131\25\3\3\0\2\3"+
    "\25\0\1\3\2\0\15\3\1\u0132\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\15\3\1\u0133\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u0134\6\3\1\137\15\3"+
    "\3\0\2\3\25\0\1\3\2\0\7\3\1\u011e\23\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u0135\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u0136\22\3"+
    "\1\106\2\3\3\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\270\23\3\3\0\2\3\25\0\1\3\2\0\1\211"+
    "\3\3\1\u0137\26\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\u0138\32\3\3\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u0139\4\3\1\u013a\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u013b\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u013c\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\u013d\1\3\1\u0125\30\3\3\0\2\3\25\0"+
    "\1\3\2\0\14\3\1\u013e\16\3\3\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u013f\30\3\3\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u0136\25\3\3\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u0140\5\3\1\u0141\16\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\u0142\5\3\1\u0143"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\2\3\1\u0144"+
    "\4\3\1\u0145\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\334\15\3\4\0\1\254\72\0\1\u0146\63\0"+
    "\2\3\25\0\1\3\2\0\2\3\1\u0147\30\3\3\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u0148\24\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\u0149\13\3\1\u014a"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\6\3\1\u014b"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\6\3\1\106"+
    "\3\3\1\u014c\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\13\3\1\u014d\17\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\334\15\3\1\u014e\3\0\2\3\25\0\1\3"+
    "\2\0\1\u014f\32\3\3\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\223\15\3\3\0\2\3\25\0\1\3\2\0"+
    "\22\3\1\107\10\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\106\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\113\32\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0133\27\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\361\24\3\3\0\2\3\25\0\1\3\2\0\22\3"+
    "\1\u0150\10\3\3\0\2\3\25\0\1\3\2\0\4\3"+
    "\1\u010e\26\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u0125\24\3\3\0\2\3\25\0\1\3\2\0\4\3"+
    "\1\106\26\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0125\27\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u0151\24\3\3\0\2\3\25\0\1\3\2\0\13\3"+
    "\1\u0152\17\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u0153\16\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u0154\24\3\3\0\2\3\25\0\1\3\2\0\15\3"+
    "\1\u0155\15\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u0156\16\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0157\2\3\1\106\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0158\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u0159\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u015a\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u015b\12\3\1\u015c\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\u015d\2\3\1\u015e\24\3"+
    "\3\0\2\3\25\0\1\3\2\0\17\3\1\137\13\3"+
    "\3\0\2\3\25\0\1\3\2\0\3\3\1\253\27\3"+
    "\3\0\2\3\25\0\1\3\2\0\22\3\1\u015f\10\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u0160\4\3"+
    "\1\u0161\5\3\1\106\12\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\106\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u0162\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\21\3\1\u0163\11\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0164\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\u0153\5\3\1\106\24\3\3\0\2\3\25\0"+
    "\1\3\2\0\1\u0165\14\3\1\u0166\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\26\3\1\u0167\4\3\3\0\2\3"+
    "\25\0\1\3\2\0\22\3\1\u0168\1\3\1\106\6\3"+
    "\3\0\2\3\25\0\1\3\2\0\32\3\1\u0169\3\0"+
    "\2\3\25\0\1\3\2\0\1\106\32\3\3\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u016a\24\3\3\0\2\3"+
    "\1\0\1\u016b\23\0\1\3\2\0\33\3\3\0\2\3"+
    "\25\0\1\3\2\0\2\3\1\u016c\30\3\3\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\u016d\27\3\3\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u016e\1\u016f\23\3\3\0"+
    "\2\3\25\0\1\3\2\0\12\3\1\u0138\20\3\3\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u0170\24\3\3\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\106\3\3\1\u0171"+
    "\21\3\3\0\2\3\25\0\1\3\2\0\11\3\1\u0172"+
    "\21\3\3\0\2\3\25\0\1\3\2\0\3\3\1\u0173"+
    "\27\3\3\0\2\3\25\0\1\3\2\0\2\3\1\106"+
    "\1\3\1\u0174\26\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\u0175\31\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u0176\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u0177\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u0178\30\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0179\5\3\1\u017a\16\3\3\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u017b\24\3\3\0\2\3\25\0"+
    "\1\3\2\0\2\3\1\u017c\30\3\3\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\106\1\u017d\7\3\1\u017e\10\3"+
    "\3\0\2\3\25\0\1\3\2\0\13\3\1\225\17\3"+
    "\3\0\2\3\25\0\1\3\2\0\11\3\1\u017f\21\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u0180\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\6\3\1\u0181\24\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\3\1\u0182\31\3"+
    "\3\0\2\3\25\0\1\3\2\0\11\3\1\u0183\21\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\3\1\u0184\3\3"+
    "\1\306\6\3\1\u0142\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u0185\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0186\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\214\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0187\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0188\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\107\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u0189\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u018a\2\3\1\u018b\1\u018c\10\3\1\u018d"+
    "\7\3\3\0\2\3\25\0\1\3\2\0\7\3\1\u018e"+
    "\1\3\1\u018f\21\3\3\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\u0190\21\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0191\27\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\2\106\3\3\1\u0192\20\3\3\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\u0158\27\3\3\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u014b\21\3\3\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\u0193\23\3\3\0\2\3\25\0"+
    "\1\3\2\0\12\3\1\u0194\20\3\3\0\2\3\25\0"+
    "\1\3\2\0\1\u0195\4\3\1\u0196\3\3\1\u0197\13\3"+
    "\1\u0198\5\3\3\0\2\3\25\0\1\3\2\0\1\225"+
    "\32\3\3\0\2\3\25\0\1\3\2\0\1\3\1\u0199"+
    "\1\u019a\30\3\3\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u019b\30\3\3\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u019c\23\3\3\0\2\3\25\0\1\3\2\0\21\3"+
    "\1\u019d\2\3\1\u019e\6\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\272\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\u019f\26\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\361\12\3\1\u011a\11\3\3\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u01a0\24\3\3\0\2\3"+
    "\25\0\1\3\2\0\1\u01a1\32\3\3\0\2\3\25\0"+
    "\1\3\2\0\7\3\1\u01a2\23\3\3\0\2\3\25\0"+
    "\1\3\2\0\11\3\1\u01a3\21\3\3\0\2\3\25\0"+
    "\1\3\2\0\6\3\1\u01a4\6\3\1\u01a5\15\3\3\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u01a6\5\3\1\106"+
    "\16\3\3\0\2\3\25\0\1\3\2\0\6\3\1\u01a7"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\2\3\1\u01a8"+
    "\30\3\3\0\2\3\25\0\1\3\2\0\5\3\1\u01a9"+
    "\25\3\3\0\2\3\25\0\1\3\2\0\1\3\1\225"+
    "\31\3\3\0\2\3\25\0\1\3\2\0\1\u01aa\32\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\u01ab\30\3"+
    "\3\0\2\3\25\0\1\3\2\0\6\3\1\u01ac\24\3"+
    "\3\0\2\3\25\0\1\3\2\0\20\3\1\106\12\3"+
    "\3\0\2\3\25\0\1\3\2\0\20\3\1\u0130\12\3"+
    "\3\0\2\3\25\0\1\3\2\0\23\3\1\u01ad\7\3"+
    "\3\0\2\3\25\0\1\3\2\0\3\3\1\u011e\27\3"+
    "\3\0\2\3\25\0\1\3\2\0\23\3\1\133\7\3"+
    "\3\0\2\3\25\0\1\3\2\0\13\3\1\106\17\3"+
    "\3\0\2\3\25\0\1\3\2\0\26\3\1\u01ae\4\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\106\30\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\u01af\30\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u01b0\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\12\3\1\301\20\3"+
    "\3\0\2\3\25\0\1\3\2\0\12\3\1\u01b1\20\3"+
    "\3\0\2\3\25\0\1\3\2\0\11\3\1\u01b2\1\u01b3"+
    "\6\3\1\u015b\11\3\3\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\u01b4\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\225\13\3\1\361\7\3\1\u01b5\1\u01b6\5\3\3\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\111\15\3\3\0"+
    "\2\3\25\0\1\3\2\0\14\3\1\225\16\3\3\0"+
    "\2\3\25\0\1\3\2\0\17\3\1\301\13\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\310\31\3\3\0"+
    "\2\3\25\0\1\3\2\0\14\3\1\106\16\3\3\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u01b7\25\3\3\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u01b8\25\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\u01b9\6\3\1\107\23\3"+
    "\3\0\2\3\25\0\1\3\2\0\13\3\1\u01ba\17\3"+
    "\3\0\2\3\25\0\1\3\2\0\12\3\1\u0123\20\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\3\1\137\31\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\3\1\u0158\31\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\3\1\u01bb\31\3"+
    "\3\0\2\3\25\0\1\3\2\0\10\3\1\u010e\1\3"+
    "\1\71\20\3\3\0\2\3\25\0\1\3\2\0\4\3"+
    "\1\u01bc\26\3\3\0\2\3\25\0\1\3\2\0\23\3"+
    "\1\106\7\3\3\0\2\3\25\0\1\3\2\0\12\3"+
    "\1\111\20\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\225\27\3\3\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\u0131\21\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u01bd\24\3\3\0\2\3\25\0\1\3\2\0\24\3"+
    "\1\106\6\3\3\0\2\3\25\0\1\3\2\0\1\300"+
    "\32\3\3\0\2\3\25\0\1\3\2\0\5\3\1\u01be"+
    "\1\u01bf\24\3\3\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u01c0\3\3\1\106\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\225\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u01c1\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u01af\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\301\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u01c2\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\106\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u01c3\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u01c4\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\107\31\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u01c5\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\u01c6\31\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\u0131\32\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u01c7\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\u0104\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\111\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\334\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u019d\30\3\3\0\2\3\25\0\1\3\2\0"+
    "\17\3\1\u01c8\13\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\107\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u01c9\30\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u01ca\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u01cb\27\3\3\0\2\3\25\0\1\3\2\0"+
    "\24\3\1\301\6\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\u01cc\31\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u01cd\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\u01ce\32\3\3\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u01cf\5\3\1\u01d0\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u01d1\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u01d2\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u01d3\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u01d4\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u01d5\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u010e\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u01d6\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\22\3\1\274\10\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\301\31\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u01d7\4\3\1\u01d8\14\3\43\0\1\u01d9"+
    "\27\0\2\3\25\0\1\3\2\0\25\3\1\u0125\5\3"+
    "\3\0\2\3\25\0\1\3\2\0\21\3\1\107\11\3"+
    "\3\0\2\3\25\0\1\3\2\0\7\3\1\u01c2\23\3"+
    "\3\0\2\3\25\0\1\3\2\0\3\3\1\u0181\27\3"+
    "\3\0\2\3\25\0\1\3\2\0\21\3\1\u01da\11\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u014b\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\6\3\1\u018a\24\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u01db\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u01dc\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\7\3\1\334\23\3"+
    "\3\0\2\3\25\0\1\3\2\0\7\3\1\u01dd\4\3"+
    "\1\u01cb\16\3\3\0\2\3\25\0\1\3\2\0\1\u01de"+
    "\32\3\3\0\2\3\25\0\1\3\2\0\15\3\1\u01df"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\7\3\1\225"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\20\3\1\107"+
    "\12\3\3\0\2\3\25\0\1\3\2\0\7\3\1\u01e0"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\17\3\1\u01e1"+
    "\13\3\3\0\2\3\25\0\1\3\2\0\14\3\1\u01e2"+
    "\16\3\3\0\2\3\25\0\1\3\2\0\1\3\1\u01e3"+
    "\31\3\3\0\2\3\25\0\1\3\2\0\5\3\1\u01e4"+
    "\25\3\3\0\2\3\25\0\1\3\2\0\15\3\1\u01e5"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\12\3\1\225"+
    "\20\3\3\0\2\3\25\0\1\3\2\0\11\3\1\274"+
    "\21\3\3\0\2\3\25\0\1\3\2\0\15\3\1\u01e6"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\7\3\1\u01e7"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\1\u01e8\32\3"+
    "\3\0\2\3\25\0\1\3\2\0\6\3\1\u01e9\24\3"+
    "\3\0\2\3\25\0\1\3\2\0\24\3\1\u01ea\6\3"+
    "\3\0\2\3\25\0\1\3\2\0\4\3\1\u014f\26\3"+
    "\3\0\2\3\25\0\1\3\2\0\2\3\1\u01eb\30\3"+
    "\3\0\2\3\25\0\1\3\2\0\7\3\1\u01ec\23\3"+
    "\3\0\2\3\25\0\1\3\2\0\5\3\1\u0104\25\3"+
    "\3\0\2\3\25\0\1\3\2\0\3\3\1\106\10\3"+
    "\1\u01ed\16\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u01ee\27\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u01ef\24\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\361\16\3\3\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\u01f0\25\3\3\0\2\3\25\0\1\3\2\0\2\3"+
    "\1\u01f1\30\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u01f2\27\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u01f3\22\3\1\u01ae\4\3\3\0\2\3\25\0\1\3"+
    "\2\0\20\3\1\u01f4\12\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u01f5\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u01f6\11\3\1\u01f7\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u01f8\25\3\3\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u0179\24\3\3\0\2\3"+
    "\25\0\1\3\2\0\24\3\1\334\6\3\3\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\u01f9\27\3\3\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u01fa\24\3\3\0\2\3"+
    "\25\0\1\3\2\0\6\3\1\u01fb\24\3\3\0\2\3"+
    "\25\0\1\3\2\0\15\3\1\225\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\2\3\1\u01fc\30\3\3\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u01fd\25\3\3\0\2\3"+
    "\25\0\1\3\2\0\4\3\1\u01fe\2\3\1\u01ff\22\3"+
    "\1\u0200\3\0\2\3\25\0\1\3\2\0\2\3\1\u0201"+
    "\30\3\3\0\2\3\25\0\1\3\2\0\6\3\1\u0171"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\30\3\1\106"+
    "\2\3\3\0\2\3\25\0\1\3\2\0\12\3\1\u0202"+
    "\20\3\3\0\2\3\25\0\1\3\2\0\7\3\1\u0203"+
    "\12\3\1\274\10\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\u0204\6\3\1\225\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\u01ed\31\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0205\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0206\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\111\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\u0207\26\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\127\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u0208\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\323\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\301\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0109\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0209\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u020a\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u020b\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u020c\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u020d\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\27\3\1\u018f\3\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0174\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u020e\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u020f\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0210\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u0211\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0212\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\216\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0213\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\27\3\1\u0214\3\3\3\0\2\3\25\0\1\3"+
    "\2\0\27\3\1\106\3\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\301\32\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\u0101\31\3\3\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\u011e\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\23\3\1\334\7\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\270\27\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u0215\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\133\27\3\3\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\u0216\15\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\107\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\225\30\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u0217\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u01e5\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\u0218\15\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\u0181\32\3\3\0\2\3\25\0\1\3\2\0\1\u0219"+
    "\32\3\3\0\2\3\25\0\1\3\2\0\11\3\1\u021a"+
    "\21\3\3\0\2\3\25\0\1\3\2\0\7\3\1\u01b5"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\15\3\1\155"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\2\3\1\u019a"+
    "\1\u013d\27\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u021b\16\3\3\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\u021c\25\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u021d\16\3\65\0\1\u021e\5\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u021f\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\146\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\70\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0181\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\27\3\1\u0220\3\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u01ab\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0221\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u01c4\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\3\1\u0109\31\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0222\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u010e\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u0223\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u0224\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0225\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0226\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\24\3\1\u0227\6\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\106\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0109\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u018f\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\107\26\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\u0228\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\u0229\32\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u022a\24\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\113\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\4\3\1\u022b\26\3\3\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\u022c\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\21\3\1\u022d\11\3\3\0\2\3\25\0\1\3\2\0"+
    "\12\3\1\u01da\20\3\3\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\u022e\15\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\u014e\32\3\3\0\2\3\25\0\1\3\2\0\7\3"+
    "\1\u022f\23\3\3\0\2\3\25\0\1\3\2\0\5\3"+
    "\1\u0230\25\3\3\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\375\21\3\3\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\u0231\21\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u01c4\16\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0232\27\3\3\0\2\3\25\0\1\3\2\0\14\3"+
    "\1\u0233\16\3\3\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\u0234\31\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0235\27\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0236\27\3\3\0\2\3\25\0\1\3\2\0\11\3"+
    "\1\364\13\3\1\301\5\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u0237\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u0238\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0239\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0104\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u023a\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\146\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\306\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\4\3\1\u023b\26\3\3\0\2\3\25\0\1\3"+
    "\2\0\7\3\1\213\23\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u023c\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\25\3\1\274\5\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\u023d\32\3\3\0\2\3\25\0\1\3\2\0"+
    "\4\3\1\u023e\26\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u023f\24\3\3\0\2\3\25\0\1\3\2\0"+
    "\22\3\1\334\10\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0240\27\3\3\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\u0241\15\3\3\0\2\3\25\0\1\3\2\0"+
    "\17\3\1\107\1\3\1\u0236\11\3\3\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\317\2\3\1\300\24\3\3\0"+
    "\2\3\25\0\1\3\2\0\17\3\1\u0242\13\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\364\32\3\3\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\u0243\27\3\3\0\2\3"+
    "\25\0\1\3\2\0\1\u0244\32\3\3\0\2\3\25\0"+
    "\1\3\2\0\3\3\1\114\27\3\3\0\2\3\25\0"+
    "\1\3\2\0\1\u0245\32\3\43\0\1\u0246\27\0\2\3"+
    "\25\0\1\3\2\0\15\3\1\u0247\15\3\3\0\2\3"+
    "\25\0\1\3\2\0\1\u0248\32\3\3\0\2\3\25\0"+
    "\1\3\2\0\4\3\1\u0249\26\3\3\0\2\3\25\0"+
    "\1\3\2\0\5\3\1\u024a\25\3\3\0\2\3\25\0"+
    "\1\3\2\0\1\u024b\32\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u024c\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u024d\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\26\3\1\u024e\4\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\u010e\32\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u024f\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u0250\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0251\24\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u0252\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\14\3\1\u01eb\16\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\u0253\32\3\3\0\2\3\25\0\1\3\2\0\3\3"+
    "\1\u0254\27\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\106\6\3\1\u0155\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\21\3\1\u0255\11\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0256\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\23\3\1\u0257\7\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u020c\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\21\3\1\u014b\11\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u018f\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0173\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u0258\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u0259\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\1\u025a\32\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\3\1\u01cb\31\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u025b\24\3\3\0\2\3\25\0\1\3\2\0"+
    "\33\3\1\u025c\2\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u025d\24\3\3\0\2\3\25\0\1\3\2\0\30\3"+
    "\1\u025e\2\3\3\0\2\3\25\0\1\3\2\0\12\3"+
    "\1\u0236\20\3\3\0\2\3\25\0\1\3\2\0\16\3"+
    "\1\u01ab\14\3\3\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\u025f\31\3\3\0\2\3\25\0\1\3\2\0\24\3"+
    "\1\u0260\6\3\3\0\2\3\25\0\1\3\2\0\25\3"+
    "\1\u0198\5\3\3\0\2\3\25\0\1\3\2\0\6\3"+
    "\1\u0261\24\3\47\0\1\u0262\23\0\2\3\25\0\1\3"+
    "\2\0\22\3\1\u023b\10\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\262\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u0263\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u0264\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\10\3\1\u0265\22\3\3\0\2\3\25\0\1\3"+
    "\2\0\12\3\1\u0266\20\3\3\0\2\3\25\0\1\3"+
    "\2\0\26\3\1\u0267\4\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\300\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u0268\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u0269\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u026a\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\14\3\1\u026b\16\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u026c\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u026d\21\3\3\0\2\3\25\0\1\3"+
    "\2\0\10\3\1\u026e\22\3\3\0\2\3\25\0\1\3"+
    "\2\0\22\3\1\211\10\3\3\0\2\3\25\0\1\3"+
    "\2\0\22\3\1\262\10\3\57\0\1\u026f\13\0\2\3"+
    "\25\0\1\3\2\0\7\3\1\u0131\23\3\3\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u0269\25\3\3\0\2\3"+
    "\25\0\1\3\2\0\5\3\1\u0250\25\3\3\0\2\3"+
    "\25\0\1\3\2\0\21\3\1\137\11\3\3\0\2\3"+
    "\25\0\1\3\2\0\26\3\1\u0270\4\3\3\0\2\3"+
    "\25\0\1\3\2\0\14\3\1\u0125\16\3\3\0\2\3"+
    "\25\0\1\3\2\0\12\3\1\u014b\20\3\3\0\2\3"+
    "\25\0\1\3\2\0\3\3\1\u0271\27\3\3\0\2\3"+
    "\25\0\1\3\2\0\11\3\1\u0272\6\3\1\u0273\12\3"+
    "\3\0\2\3\25\0\1\3\2\0\1\3\1\u0182\2\3"+
    "\1\u0104\1\u0274\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u0124\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u0275\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\1\u0276\32\3\3\0\2\3\25\0\1\3\2\0\1\276"+
    "\32\3\3\0\2\3\25\0\1\3\2\0\11\3\1\u0277"+
    "\21\3\3\0\2\3\25\0\1\3\2\0\6\3\1\225"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\12\3\1\u0263"+
    "\13\3\1\u0278\4\3\44\0\1\u0279\26\0\2\3\25\0"+
    "\1\3\2\0\13\3\1\u027a\10\3\1\u027b\6\3\3\0"+
    "\2\3\25\0\1\3\2\0\1\3\1\u027c\31\3\3\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\u027d\15\3\3\0"+
    "\2\3\25\0\1\3\2\0\6\3\1\u027e\24\3\3\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\u027f\15\3\3\0"+
    "\2\3\25\0\1\3\2\0\3\3\1\317\27\3\3\0"+
    "\2\3\25\0\1\3\2\0\5\3\1\u0210\25\3\3\0"+
    "\2\3\25\0\1\3\2\0\14\3\1\u0280\16\3\3\0"+
    "\2\3\25\0\1\3\2\0\15\3\1\u0281\15\3\51\0"+
    "\1\u0282\21\0\2\3\25\0\1\3\2\0\14\3\1\u0283"+
    "\16\3\3\0\2\3\25\0\1\3\2\0\15\3\1\u0284"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\4\3\1\u019e"+
    "\26\3\3\0\2\3\25\0\1\3\2\0\24\3\1\u0285"+
    "\6\3\3\0\2\3\25\0\1\3\2\0\10\3\1\u0286"+
    "\22\3\3\0\2\3\25\0\1\3\2\0\24\3\1\u0287"+
    "\6\3\3\0\2\3\25\0\1\3\2\0\1\3\1\u0288"+
    "\31\3\3\0\2\3\25\0\1\3\2\0\1\u0289\32\3"+
    "\36\0\1\u028a\34\0\2\3\25\0\1\3\2\0\1\3"+
    "\1\361\31\3\3\0\2\3\25\0\1\3\2\0\1\u019d"+
    "\32\3\3\0\2\3\25\0\1\3\2\0\15\3\1\u028b"+
    "\15\3\3\0\2\3\25\0\1\3\2\0\21\3\1\u028c"+
    "\11\3\3\0\2\3\25\0\1\3\2\0\6\3\1\u028d"+
    "\24\3\3\0\2\3\25\0\1\3\2\0\7\3\1\375"+
    "\23\3\3\0\2\3\25\0\1\3\2\0\11\3\1\u0198"+
    "\21\3\56\0\1\u0262\14\0\2\3\25\0\1\3\2\0"+
    "\2\3\1\u028e\30\3\3\0\2\3\25\0\1\3\2\0"+
    "\13\3\1\u028f\17\3\3\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\u01d7\21\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0290\27\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u0291\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\7\3\1\u0292\23\3\3\0\2\3\25\0\1\3\2\0"+
    "\3\3\1\u0293\27\3\3\0\2\3\25\0\1\3\2\0"+
    "\15\3\1\u0294\15\3\3\0\2\3\25\0\1\3\2\0"+
    "\11\3\1\u0295\21\3\3\0\2\3\25\0\1\3\2\0"+
    "\5\3\1\u0296\25\3\3\0\2\3\25\0\1\3\2\0"+
    "\6\3\1\u0297\24\3\3\0\2\3\25\0\1\3\2\0"+
    "\10\3\1\u0298\22\3\3\0\2\3\25\0\1\3\2\0"+
    "\4\3\1\u0299\1\u0275\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\6\3\1\u029a\24\3\3\0\2\3\25\0\1\3"+
    "\2\0\5\3\1\u029b\25\3\3\0\2\3\25\0\1\3"+
    "\2\0\3\3\1\u029c\27\3\3\0\2\3\25\0\1\3"+
    "\2\0\15\3\1\u029d\15\3\3\0\2\3\25\0\1\3"+
    "\2\0\2\3\1\u029e\30\3\3\0\2\3\25\0\1\3"+
    "\2\0\11\3\1\u0297\21\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36288];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\44\1\1\0\3\1\2\0"+
    "\1\1\1\0\170\1\2\0\227\1\1\11\44\1\1\0"+
    "\155\1\1\0\104\1\1\0\47\1\1\0\25\1\1\0"+
    "\5\1\1\11\14\1\1\0\11\1\1\0\10\1\1\0"+
    "\7\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[670];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int col;
    public int line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 396) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return ERROR;
            } 
            // fall through
          case 12: break;
          case 2: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Identificador;
            } 
            // fall through
          case 13: break;
          case 3: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Decimal;
            } 
            // fall through
          case 14: break;
          case 4: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Operador;
            } 
            // fall through
          case 15: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 16: break;
          case 6: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Comentario;
            } 
            // fall through
          case 17: break;
          case 7: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Comentario_Incompleto;
            } 
            // fall through
          case 18: break;
          case 8: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Entero;
            } 
            // fall through
          case 19: break;
          case 9: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return String;
            } 
            // fall through
          case 20: break;
          case 10: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Reservadas;
            } 
            // fall through
          case 21: break;
          case 11: 
            { line=yyline; col=yycolumn; lexeme=yytext(); return Boolean;
            } 
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
