
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 28 22:21:52 CST 2019
//----------------------------------------------------

package lexanalyzer;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 28 22:21:52 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\007\005\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\067\004\000\002\067\003\000\002\070\003" +
    "\000\002\070\003\000\002\071\007\000\002\072\004\000" +
    "\002\073\005\000\002\074\003\000\002\074\003\000\002" +
    "\074\002\000\002\075\004\000\002\075\003\000\002\076" +
    "\007\000\002\077\005\000\002\077\002\000\002\100\004" +
    "\000\002\101\002\000\002\004\011\000\002\063\002\000" +
    "\002\063\011\000\002\063\004\000\002\064\005\000\002" +
    "\064\002\000\002\056\004\000\002\056\004\000\002\056" +
    "\007\000\002\062\003\000\002\062\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\057\005\000\002" +
    "\057\005\000\002\057\010\000\002\057\004\000\002\057" +
    "\002\000\002\060\004\000\002\061\006\000\002\061\002" +
    "\000\002\010\006\000\002\005\003\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\034\003\000\002\035\005\000\002\035" +
    "\003\000\002\042\004\000\002\042\006\000\002\042\010" +
    "\000\002\043\005\000\002\043\007\000\002\043\011\000" +
    "\002\043\002\000\002\040\005\000\002\040\003\000\002" +
    "\041\006\000\002\041\003\000\002\052\003\000\002\052" +
    "\005\000\002\052\007\000\002\053\004\000\002\053\002" +
    "\000\002\036\005\000\002\036\003\000\002\046\004\000" +
    "\002\044\005\000\002\044\002\000\002\037\005\000\002" +
    "\037\003\000\002\045\005\000\002\045\003\000\002\047" +
    "\004\000\002\050\004\000\002\050\002\000\002\011\011" +
    "\000\002\011\005\000\002\012\004\000\002\012\003\000" +
    "\002\013\004\000\002\013\004\000\002\014\003\000\002" +
    "\014\005\000\002\014\007\000\002\014\011\000\002\015" +
    "\010\000\002\015\003\000\002\016\012\000\002\016\016" +
    "\000\002\017\003\000\002\017\005\000\002\017\007\000" +
    "\002\017\003\000\002\020\006\000\002\020\003\000\002" +
    "\021\004\000\002\022\005\000\002\022\002\000\002\023" +
    "\004\000\002\023\003\000\002\024\007\000\002\024\007" +
    "\000\002\024\007\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\002\000\002\026\007\000\002" +
    "\026\007\000\002\026\007\000\002\026\002\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\027\004" +
    "\000\002\027\005\000\002\027\004\000\002\027\004\000" +
    "\002\027\003\000\002\027\005\000\002\055\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\032" +
    "\007\000\002\033\003\000\002\033\003\000\002\033\002" +
    "\000\002\105\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\012\015\004\020\005\023\012\104\011\001" +
    "\002\000\042\004\324\005\332\006\325\012\320\044\322" +
    "\047\331\050\315\051\327\052\333\065\u0112\070\u0115\071" +
    "\u0111\072\u0119\073\u0110\074\u0116\075\u0113\001\002\000\014" +
    "\017\241\021\242\024\233\025\243\047\043\001\002\000" +
    "\016\002\uffc6\015\uffc6\020\uffc6\023\uffc6\101\uffc6\104\uffc6" +
    "\001\002\000\016\002\ufff7\015\004\020\005\023\012\101" +
    "\017\104\011\001\002\000\016\002\ufff7\015\004\020\005" +
    "\023\012\101\017\104\011\001\002\000\004\063\226\001" +
    "\002\000\014\057\116\060\120\061\117\062\115\063\114" +
    "\001\002\000\004\002\113\001\002\000\016\002\ufff7\015" +
    "\004\020\005\023\012\101\017\104\011\001\002\000\016" +
    "\002\ufff7\015\004\020\005\023\012\101\017\104\011\001" +
    "\002\000\016\002\ufff7\015\004\020\005\023\012\101\017" +
    "\104\011\001\002\000\016\062\036\063\040\102\041\103" +
    "\037\105\034\106\035\001\002\000\016\002\ufff7\015\004" +
    "\020\005\023\012\101\017\104\011\001\002\000\004\002" +
    "\000\001\002\000\016\002\ufff7\015\004\020\005\023\012" +
    "\101\017\104\011\001\002\000\016\002\ufff7\015\004\020" +
    "\005\023\012\101\017\104\011\001\002\000\016\002\ufff7" +
    "\015\004\020\005\023\012\101\017\104\011\001\002\000" +
    "\004\002\ufffb\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\ufff8\001\002\000\004\060" +
    "\ufff0\001\002\000\004\060\062\001\002\000\004\046\060" +
    "\001\002\000\004\060\uffef\001\002\000\004\060\uffee\001" +
    "\002\000\004\047\043\001\002\000\006\105\034\106\035" +
    "\001\002\000\004\047\043\001\002\000\004\047\043\001" +
    "\002\000\004\046\ufff4\001\002\000\022\004\uff9b\022\uff9b" +
    "\026\uff9b\027\uff9b\046\uff9b\056\044\066\uff9b\076\uff9b\001" +
    "\002\000\004\047\045\001\002\000\022\004\uff9a\022\uff9a" +
    "\026\uff9a\027\uff9a\046\uff9a\056\046\066\uff9a\076\uff9a\001" +
    "\002\000\004\047\047\001\002\000\024\004\uff99\022\uff99" +
    "\026\uff99\027\uff99\046\uff99\054\uff99\056\050\066\uff99\076" +
    "\uff99\001\002\000\004\047\051\001\002\000\022\004\uff98" +
    "\022\uff98\026\uff98\027\uff98\046\uff98\054\uff98\066\uff98\076" +
    "\uff98\001\002\000\004\046\uffe1\001\002\000\004\046\ufff5" +
    "\001\002\000\004\046\uffe2\001\002\000\004\060\ufff1\001" +
    "\002\000\004\046\ufff3\001\002\000\016\002\ufff6\015\ufff6" +
    "\020\ufff6\023\ufff6\101\ufff6\104\ufff6\001\002\000\016\002" +
    "\uff6c\015\uff6c\020\uff6c\023\uff6c\101\uff6c\104\uff6c\001\002" +
    "\000\004\046\ufff2\001\002\000\004\047\063\001\002\000" +
    "\004\064\064\001\002\000\004\047\043\001\002\000\004" +
    "\004\067\001\002\000\004\046\uffed\001\002\000\004\047" +
    "\070\001\002\000\012\007\uffe8\110\072\111\073\112\uffe8" +
    "\001\002\000\004\046\uffec\001\002\000\006\007\uffea\112" +
    "\uffea\001\002\000\006\007\uffe9\112\uffe9\001\002\000\006" +
    "\007\075\112\100\001\002\000\004\047\070\001\002\000" +
    "\004\046\uffe6\001\002\000\004\046\uffeb\001\002\000\004" +
    "\004\101\001\002\000\004\047\102\001\002\000\006\007" +
    "\103\011\uffe3\001\002\000\004\047\106\001\002\000\004" +
    "\011\105\001\002\000\004\046\uffe5\001\002\000\006\007" +
    "\103\011\uffe3\001\002\000\004\011\uffe4\001\002\000\004" +
    "\046\uffe7\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002\000\006\042\202" +
    "\047\200\001\002\000\006\042\167\047\165\001\002\000" +
    "\004\047\161\001\002\000\006\042\146\047\145\001\002" +
    "\000\006\042\124\047\123\001\002\000\004\046\uffb3\001" +
    "\002\000\004\046\060\001\002\000\010\046\uffb2\056\131" +
    "\064\130\001\002\000\004\043\126\001\002\000\004\046" +
    "\uffb5\001\002\000\004\047\123\001\002\000\004\046\uffb6" +
    "\001\002\000\004\047\136\001\002\000\004\047\132\001" +
    "\002\000\010\007\uffb1\046\uffb1\056\133\001\002\000\004" +
    "\047\134\001\002\000\006\007\uffb0\046\uffb0\001\002\000" +
    "\006\007\137\046\uffae\001\002\000\010\007\uffb2\046\uffb2" +
    "\056\131\001\002\000\004\047\123\001\002\000\004\046" +
    "\uffb4\001\002\000\004\046\uffaf\001\002\000\016\002\uffc4" +
    "\015\uffc4\020\uffc4\023\uffc4\101\uffc4\104\uffc4\001\002\000" +
    "\004\046\uffa7\001\002\000\004\046\060\001\002\000\010" +
    "\007\152\046\uffa2\056\153\001\002\000\004\043\150\001" +
    "\002\000\004\046\uffa5\001\002\000\004\047\145\001\002" +
    "\000\004\046\uffa8\001\002\000\004\047\145\001\002\000" +
    "\004\047\155\001\002\000\004\046\uffa4\001\002\000\006" +
    "\007\152\046\uffa2\001\002\000\004\046\uffa6\001\002\000" +
    "\004\046\uffa3\001\002\000\016\002\uffc2\015\uffc2\020\uffc2" +
    "\023\uffc2\101\uffc2\104\uffc2\001\002\000\004\046\uffc0\001" +
    "\002\000\004\046\060\001\002\000\016\002\uffc5\015\uffc5" +
    "\020\uffc5\023\uffc5\101\uffc5\104\uffc5\001\002\000\004\046" +
    "\uffac\001\002\000\006\007\174\046\uffa9\001\002\000\004" +
    "\046\060\001\002\000\004\043\170\001\002\000\004\047" +
    "\165\001\002\000\004\046\uffad\001\002\000\016\002\uffc1" +
    "\015\uffc1\020\uffc1\023\uffc1\101\uffc1\104\uffc1\001\002\000" +
    "\004\046\uffab\001\002\000\004\047\175\001\002\000\006" +
    "\007\174\046\uffa9\001\002\000\004\046\uffaa\001\002\000" +
    "\004\046\uffbe\001\002\000\010\007\207\046\uffb7\056\210" +
    "\001\002\000\004\046\060\001\002\000\004\043\203\001" +
    "\002\000\004\047\200\001\002\000\004\046\uffbf\001\002" +
    "\000\016\002\uffc3\015\uffc3\020\uffc3\023\uffc3\101\uffc3\104" +
    "\uffc3\001\002\000\004\046\uffbd\001\002\000\004\047\216" +
    "\001\002\000\004\047\211\001\002\000\010\007\207\046" +
    "\uffb7\056\213\001\002\000\004\046\uffbc\001\002\000\004" +
    "\047\214\001\002\000\006\007\207\046\uffb7\001\002\000" +
    "\004\046\uffbb\001\002\000\010\007\207\046\uffb7\056\220" +
    "\001\002\000\004\046\uffba\001\002\000\004\047\221\001" +
    "\002\000\010\007\207\046\uffb7\056\223\001\002\000\004" +
    "\046\uffb9\001\002\000\004\047\224\001\002\000\006\007" +
    "\207\046\uffb7\001\002\000\004\046\uffb8\001\002\000\004" +
    "\047\043\001\002\000\004\046\060\001\002\000\016\002" +
    "\uffc7\015\uffc7\020\uffc7\023\uffc7\101\uffc7\104\uffc7\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\ufffe\001\002\000" +
    "\004\004\u010b\001\002\000\004\046\uff9e\001\002\000\004" +
    "\046\060\001\002\000\010\004\300\026\277\027\301\001" +
    "\002\000\010\004\300\026\277\027\301\001\002\000\010" +
    "\004\uff96\026\uff96\027\uff96\001\002\000\010\024\233\025" +
    "\243\047\043\001\002\000\004\004\270\001\002\000\004" +
    "\004\244\001\002\000\004\052\245\001\002\000\004\007" +
    "\246\001\002\000\004\052\247\001\002\000\006\007\251" +
    "\010\250\001\002\000\004\052\262\001\002\000\006\047" +
    "\254\052\252\001\002\000\004\011\uff90\001\002\000\004" +
    "\011\261\001\002\000\006\011\uff93\056\255\001\002\000" +
    "\004\047\256\001\002\000\006\011\uff92\056\257\001\002" +
    "\000\004\047\260\001\002\000\004\011\uff91\001\002\000" +
    "\010\004\uff95\026\uff95\027\uff95\001\002\000\004\010\263" +
    "\001\002\000\004\052\264\001\002\000\004\007\265\001" +
    "\002\000\006\047\254\052\252\001\002\000\004\011\267" +
    "\001\002\000\010\004\uff94\026\uff94\027\uff94\001\002\000" +
    "\004\051\271\001\002\000\004\011\272\001\002\000\012" +
    "\017\241\024\233\025\243\047\043\001\002\000\004\046" +
    "\060\001\002\000\016\002\uffa1\015\uffa1\020\uffa1\023\uffa1" +
    "\101\uffa1\104\uffa1\001\002\000\004\046\uff9f\001\002\000" +
    "\004\046\uff8e\001\002\000\004\004\313\001\002\000\004" +
    "\047\304\001\002\000\004\046\uff89\001\002\000\004\046" +
    "\uff9d\001\002\000\004\011\311\001\002\000\006\007\305" +
    "\011\uff8b\001\002\000\004\047\307\001\002\000\004\011" +
    "\uff8d\001\002\000\006\007\305\011\uff8b\001\002\000\004" +
    "\011\uff8c\001\002\000\006\026\277\027\301\001\002\000" +
    "\004\046\uff8f\001\002\000\030\004\324\005\332\006\325" +
    "\012\320\030\321\031\334\044\322\047\331\050\315\051" +
    "\327\052\333\001\002\000\004\046\uff8a\001\002\000\016" +
    "\007\uff72\011\uff72\016\uff72\046\uff72\076\uff72\100\uff72\001" +
    "\002\000\004\054\uff74\001\002\000\016\007\uff76\011\uff76" +
    "\016\uff76\046\uff76\076\uff76\100\uff76\001\002\000\004\047" +
    "\u0108\001\002\000\006\007\335\011\uff82\001\002\000\004" +
    "\004\377\001\002\000\004\054\375\001\002\000\024\004" +
    "\324\005\332\006\325\012\320\044\322\047\331\050\315" +
    "\051\327\052\333\001\002\000\024\004\324\005\332\006" +
    "\325\012\320\044\322\047\331\050\315\051\327\052\333" +
    "\001\002\000\006\007\335\011\uff82\001\002\000\016\007" +
    "\uff71\011\uff71\016\uff71\046\uff71\076\uff71\100\uff71\001\002" +
    "\000\016\007\uff7d\011\uff7d\016\uff7d\046\uff7d\076\uff7d\100" +
    "\uff7d\001\002\000\022\007\uff7c\011\uff7c\016\uff7c\046\uff7c" +
    "\054\uff9b\056\365\076\uff7c\100\uff7c\001\002\000\024\004" +
    "\324\005\332\006\325\012\320\044\322\047\331\050\315" +
    "\051\327\052\333\001\002\000\016\007\uff73\011\uff73\016" +
    "\uff73\046\uff73\076\uff73\100\uff73\001\002\000\006\007\335" +
    "\011\uff82\001\002\000\030\004\324\005\332\006\325\012" +
    "\320\030\356\031\360\044\322\047\331\050\315\051\327" +
    "\052\333\001\002\000\004\011\337\001\002\000\006\004" +
    "\340\046\uff7e\001\002\000\030\004\324\005\332\006\325" +
    "\012\320\030\342\031\344\044\322\047\331\050\315\051" +
    "\327\052\333\001\002\000\004\046\uff87\001\002\000\006" +
    "\007\335\011\uff82\001\002\000\006\007\335\011\uff82\001" +
    "\002\000\006\007\335\011\uff82\001\002\000\004\011\346" +
    "\001\002\000\006\004\340\046\uff7e\001\002\000\004\046" +
    "\uff80\001\002\000\004\011\351\001\002\000\006\004\340" +
    "\046\uff7e\001\002\000\004\046\uff7f\001\002\000\004\011" +
    "\354\001\002\000\006\004\340\046\uff7e\001\002\000\004" +
    "\046\uff81\001\002\000\006\007\335\011\uff82\001\002\000" +
    "\006\007\335\011\uff82\001\002\000\006\007\335\011\uff82" +
    "\001\002\000\004\011\uff84\001\002\000\004\011\uff83\001" +
    "\002\000\004\011\uff85\001\002\000\016\007\uff78\011\uff78" +
    "\016\uff78\046\uff78\076\uff78\100\uff78\001\002\000\004\047" +
    "\366\001\002\000\022\007\uff7b\011\uff7b\016\uff7b\046\uff7b" +
    "\054\uff9a\056\046\076\uff7b\100\uff7b\001\002\000\004\011" +
    "\370\001\002\000\006\004\340\046\uff7e\001\002\000\004" +
    "\046\uff86\001\002\000\016\007\uff77\011\uff77\016\uff77\046" +
    "\uff77\076\uff77\100\uff77\001\002\000\004\011\374\001\002" +
    "\000\016\007\uff79\011\uff79\016\uff79\046\uff79\076\uff79\100" +
    "\uff79\001\002\000\024\004\324\005\332\006\325\012\320" +
    "\044\322\047\331\050\315\051\327\052\333\001\002\000" +
    "\016\007\uff75\011\uff75\016\uff75\046\uff75\076\uff75\100\uff75" +
    "\001\002\000\030\004\uff6d\005\uff6d\006\uff6d\012\uff6d\035" +
    "\u0100\044\uff6d\045\u0102\047\uff6d\050\uff6d\051\uff6d\052\uff6d" +
    "\001\002\000\024\004\uff6f\005\uff6f\006\uff6f\012\uff6f\044" +
    "\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\001\002\000\024" +
    "\004\324\005\332\006\325\012\320\044\322\047\331\050" +
    "\315\051\327\052\333\001\002\000\024\004\uff6e\005\uff6e" +
    "\006\uff6e\012\uff6e\044\uff6e\047\uff6e\050\uff6e\051\uff6e\052" +
    "\uff6e\001\002\000\004\011\u0104\001\002\000\016\007\uff70" +
    "\011\uff70\016\uff70\046\uff70\076\uff70\100\uff70\001\002\000" +
    "\004\011\u0106\001\002\000\006\004\340\046\uff7e\001\002" +
    "\000\004\046\uff88\001\002\000\016\007\uff7a\011\uff7a\016" +
    "\uff7a\046\uff7a\076\uff7a\100\uff7a\001\002\000\004\046\uff9c" +
    "\001\002\000\016\002\uffa0\015\uffa0\020\uffa0\023\uffa0\101" +
    "\uffa0\104\uffa0\001\002\000\004\047\u010c\001\002\000\004" +
    "\007\u010d\001\002\000\004\052\u010e\001\002\000\004\011" +
    "\u010f\001\002\000\010\004\uff97\026\uff97\027\uff97\001\002" +
    "\000\004\004\uffd2\001\002\000\004\004\uffd4\001\002\000" +
    "\010\007\u0136\016\uffcb\100\u0135\001\002\000\004\004\uffd1" +
    "\001\002\000\010\007\u0136\016\uffcb\100\u0135\001\002\000" +
    "\004\004\uffd5\001\002\000\004\004\uffd0\001\002\000\004" +
    "\004\u0132\001\002\000\004\016\u011a\001\002\000\004\004" +
    "\uffd3\001\002\000\004\047\043\001\002\000\012\022\uffc8" +
    "\046\uffc8\066\u012e\076\uffc8\001\002\000\010\022\u011e\046" +
    "\uffdf\076\uffdf\001\002\000\006\046\uffdb\076\u0129\001\002" +
    "\000\040\004\324\005\332\006\325\012\320\044\322\047" +
    "\331\050\315\051\327\052\333\070\u0115\071\u0111\072\u0119" +
    "\073\u0110\074\u0116\075\u0113\001\002\000\006\046\uffdd\076" +
    "\uffdd\001\002\000\004\004\u0121\001\002\000\026\004\324" +
    "\005\332\006\325\012\320\044\322\047\331\050\315\051" +
    "\327\052\333\065\u0124\001\002\000\004\011\u0125\001\002" +
    "\000\004\011\uffd6\001\002\000\004\011\uffd7\001\002\000" +
    "\004\054\u0126\001\002\000\010\050\315\051\327\052\333" +
    "\001\002\000\006\046\uffde\076\uffde\001\002\000\004\046" +
    "\060\001\002\000\004\077\u012a\001\002\000\004\047\043" +
    "\001\002\000\004\046\uffdc\001\002\000\016\002\uffe0\015" +
    "\uffe0\020\uffe0\023\uffe0\101\uffe0\104\uffe0\001\002\000\010" +
    "\022\uffca\046\uffca\076\uffca\001\002\000\004\067\u012f\001" +
    "\002\000\004\047\043\001\002\000\012\022\uffc8\046\uffc8" +
    "\066\u012e\076\uffc8\001\002\000\010\022\uffc9\046\uffc9\076" +
    "\uffc9\001\002\000\026\004\324\005\332\006\325\012\320" +
    "\044\322\047\331\050\315\051\327\052\333\065\u0124\001" +
    "\002\000\004\011\u0134\001\002\000\010\007\u0136\016\uffcb" +
    "\100\u0135\001\002\000\004\047\u0141\001\002\000\042\004" +
    "\324\005\332\006\325\012\320\044\322\047\331\050\315" +
    "\051\327\052\333\065\u0138\070\u0115\071\u0111\072\u0119\073" +
    "\u0110\074\u0116\075\u0113\001\002\000\004\016\uffd8\001\002" +
    "\000\010\007\u0136\016\uffcb\100\u0135\001\002\000\010\007" +
    "\u0136\016\uffcb\100\u0135\001\002\000\004\004\u013b\001\002" +
    "\000\026\004\324\005\332\006\325\012\320\044\322\047" +
    "\331\050\315\051\327\052\333\065\u0124\001\002\000\004" +
    "\011\u013d\001\002\000\010\007\u0136\016\uffcb\100\u0135\001" +
    "\002\000\004\016\uffcd\001\002\000\004\016\uffce\001\002" +
    "\000\004\016\uffcf\001\002\000\004\016\uffcc\001\002\000" +
    "\004\016\uffd9\001\002\000\004\016\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\016\002\012\004\013\005\014\006\006\010" +
    "\007\011\005\001\001\000\020\014\315\027\u0113\030\327" +
    "\032\316\055\322\056\u0117\065\u0116\001\001\000\014\012" +
    "\234\013\233\014\236\015\235\016\237\001\001\000\002" +
    "\001\001\000\020\003\231\004\022\005\023\006\015\007" +
    "\021\010\017\011\005\001\001\000\020\003\230\004\022" +
    "\005\023\006\015\007\021\010\017\011\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\111\004\022\005\023\006\015\007\021\010\017\011" +
    "\005\001\001\000\020\003\020\004\022\005\023\006\015" +
    "\007\021\010\017\011\005\001\001\000\020\003\110\004" +
    "\022\005\023\006\015\007\021\010\017\011\005\001\001" +
    "\000\010\066\032\067\031\070\030\001\001\000\020\003" +
    "\027\004\022\005\023\006\015\007\021\010\017\011\005" +
    "\001\001\000\002\001\001\000\020\003\026\004\022\005" +
    "\023\006\015\007\021\010\017\011\005\001\001\000\020" +
    "\003\025\004\022\005\023\006\015\007\021\010\017\011" +
    "\005\001\001\000\020\003\024\004\022\005\023\006\015" +
    "\007\021\010\017\011\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\060\001\001\000\004\105\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\055" +
    "\001\001\000\004\070\054\001\001\000\006\014\051\100" +
    "\052\001\001\000\004\014\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\064\001\001\000\004" +
    "\072\065\001\001\000\002\001\001\000\004\073\070\001" +
    "\001\000\004\074\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\075\076\076\075\001" +
    "\001\000\004\073\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\200\042\176\001\001\000\006\036" +
    "\165\046\163\001\001\000\004\034\161\001\001\000\010" +
    "\037\143\045\142\047\146\001\001\000\010\040\121\041" +
    "\124\052\120\001\001\000\002\001\001\000\004\105\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\126\052\120\001\001\000\002\001\001" +
    "\000\004\052\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\137" +
    "\001\001\000\002\001\001\000\006\041\140\052\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\157\001\001\000\004\050" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\150\047\146\001\001\000\002\001\001\000\006\045" +
    "\156\047\146\001\001\000\004\047\155\001\001\000\002" +
    "\001\001\000\004\050\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\172\001\001\000\004\105\171\001\001\000\002" +
    "\001\001\000\004\046\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\205\001\001\000\004\105\204\001\001\000\002" +
    "\001\001\000\004\042\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\214\001\001\000\002\001\001" +
    "\000\004\043\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\224\001\001\000\002\001\001\000" +
    "\004\014\226\001\001\000\004\105\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\105\u0109\001\001\000\006" +
    "\020\u0108\023\275\001\001\000\006\020\301\023\275\001" +
    "\001\000\002\001\001\000\012\013\274\014\236\015\235" +
    "\016\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\272\013\233\014\236\015\235\016\237\001" +
    "\001\000\004\105\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\313\001\001\000" +
    "\004\021\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\307\001\001\000\002" +
    "\001\001\000\004\023\311\001\001\000\002\001\001\000" +
    "\014\014\315\027\325\030\327\032\316\055\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\315\027" +
    "\372\030\327\032\316\055\322\001\001\000\014\014\315" +
    "\027\371\030\327\032\316\055\322\001\001\000\004\025" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\315\027\363\030\327\032\316\055" +
    "\322\001\001\000\002\001\001\000\004\025\335\001\001" +
    "\000\014\014\315\027\356\030\327\032\316\055\322\001" +
    "\001\000\002\001\001\000\004\026\340\001\001\000\014" +
    "\014\315\027\342\030\327\032\316\055\322\001\001\000" +
    "\002\001\001\000\004\025\352\001\001\000\004\025\347" +
    "\001\001\000\004\025\344\001\001\000\002\001\001\000" +
    "\004\026\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\354\001\001\000\002\001\001\000\004" +
    "\025\362\001\001\000\004\025\361\001\001\000\004\025" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\315\027\375\030\327\032\316\055\322" +
    "\001\001\000\002\001\001\000\004\033\u0100\001\001\000" +
    "\002\001\001\000\014\014\315\027\u0102\030\327\032\316" +
    "\055\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u0142\001\001\000\002" +
    "\001\001\000\004\057\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\u011a\060\u011b\001\001\000\004\061" +
    "\u012c\001\001\000\004\063\u011c\001\001\000\004\064\u0127" +
    "\001\001\000\016\014\315\027\u011e\030\327\032\316\055" +
    "\322\065\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\315\027\u0122\030\327\032\316\055\322\062" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u0126\001\001\000" +
    "\002\001\001\000\004\105\u012b\001\001\000\002\001\001" +
    "\000\004\014\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u012f" +
    "\001\001\000\004\061\u0130\001\001\000\002\001\001\000" +
    "\016\014\315\027\u0122\030\327\032\316\055\322\062\u0132" +
    "\001\001\000\002\001\001\000\004\057\u0136\001\001\000" +
    "\002\001\001\000\016\014\315\027\u0138\030\327\032\316" +
    "\055\322\065\u0139\001\001\000\002\001\001\000\004\057" +
    "\u013f\001\001\000\004\057\u013e\001\001\000\002\001\001" +
    "\000\016\014\315\027\u0122\030\327\032\316\055\322\062" +
    "\u013b\001\001\000\002\001\001\000\004\057\u013d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FIN ::= FinSentencia 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FIN",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // S ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // S ::= Distinct 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // S ::= All 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression2 ::= Sum ParentesisA S expression ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression2",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // constant ::= Entero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // constant ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // constant ::= String 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expressionTemp ::= object 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expressionTemp",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= expressionTemp Operador expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= expression2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= Negativo expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= Positivo expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= ParentesisA expression ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= At Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= constant 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // P ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // P ::= ParentesisA expression O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // P ::= ParentesisA Null O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // P ::= ParentesisA Default O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // O ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // O ::= Comma expression O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // O ::= Comma Null O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // O ::= Comma Default O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N ::= ParentesisA expression O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("N",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N ::= ParentesisA Null O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("N",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N ::= ParentesisA Default O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("N",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // L ::= DefaultValues 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("L",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // L ::= Values N 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("L",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // M ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // M ::= Comma Identificador M 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // columnList ::= Identificador M 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columnList",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= L 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= ParentesisA columnList ParentesisC L 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // F ::= String 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // F ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // F ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // F ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // oRowset ::= OpenRowset ParentesisA String Comma String PuntoComma String PuntoComma String Comma F ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oRowset",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // oRowset ::= OpenRowset ParentesisA String Comma String Comma F ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oRowset",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // rowsetFunc ::= oRowset 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("rowsetFunc",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // rowsetFunc ::= OpenQuery ParentesisA Identificador Comma String ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("rowsetFunc",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // object ::= Identificador Punto Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // object ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // object ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // object ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // C ::= rowsetFunc E 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("C",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // C ::= object E 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("C",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // B ::= C 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("B",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // B ::= Into C 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("B",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // A ::= Insert B FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("A",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // A ::= Insert Top ParentesisA Entero ParentesisC B FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("A",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DropN ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropN",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DropN ::= Comma DropL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropN",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DropM ::= Identificador DropN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropM",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DropL ::= DropM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropL",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DropL ::= Identificador Punto DropM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropL",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DropE ::= DropL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropE",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DropE ::= If Exists DropL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropE",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DropK ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropK",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DropK ::= Comma Identificador DropK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropK",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DropJ ::= Identificador DropK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropJ",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DropD ::= DropJ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropD",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DropD ::= If Exists DropJ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropD",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DropObject2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject2",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DropObject2 ::= Comma DropX 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject2",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DropObject ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DropObject ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DropObject ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropX ::= DropObject 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropX",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropX ::= Identificador On DropObject DropObject2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropX",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropF ::= DropX 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropF",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropF ::= If Exists DropX 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropF",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropH ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropH ::= Comma Identificador Punto Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropH ::= Comma Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropH ::= Comma Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropG ::= Identificador Punto Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropG",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropG ::= Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropG",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropG ::= Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropG",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropC ::= DropG 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropC",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropC ::= If Exists DropG 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropC",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropB ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropB",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // opcionDrop ::= Drop Database DropD FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // opcionDrop ::= Drop View DropE FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opcionDrop ::= Drop Table DropC FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opcionDrop ::= Drop Index DropF FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opcionDrop ::= Drop Login DropB FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opcionInsert ::= A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionInsert",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opcionTruncate ::= Truncate Table object FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionTruncate",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Sel4 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel4",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Sel4 ::= Inner Join object Sel4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel4",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Sel3 ::= object Sel4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel3",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Sel2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Sel2 ::= As Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Sel2 ::= Comma AgFunction ParentesisA Sel5 ParentesisC Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Sel2 ::= Comma expression Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Sel2 ::= Comma Star Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AgFunction ::= Year 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AgFunction ::= Month 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AgFunction ::= Day 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AgFunction ::= Min 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AgFunction ::= Max 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AgFunction ::= Count 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Sel5 ::= expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel5",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Sel5 ::= Star 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel5",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Sel1 ::= AgFunction ParentesisA Sel5 ParentesisC Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel1",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sel1 ::= expression Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel1",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Sel1 ::= Star Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel1",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sel7 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel7",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sel7 ::= Order By object 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel7",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sel6 ::= Where expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel6",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Sel6 ::= Where AgFunction ParentesisA Sel5 ParentesisC Operador constant 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel6",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sel6 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel6",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opcionSelect ::= Select Sel1 From Sel3 Sel6 Sel7 FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionSelect",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Create12 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create12",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Create11 ::= object Create12 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create11",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Create10 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create10",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Create10 ::= Comma Identificador Create10 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create10",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Create9 ::= Include ParentesisA Identificador Create10 ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create9",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Create8 ::= Create9 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create8",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Create8 ::= Comma Create6 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create8",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Create7 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create7",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Create7 ::= Desc 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create7",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Create7 ::= Asc 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create7",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Create6 ::= Identificador Create7 Create8 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create6",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Create5 ::= ParentesisA Create6 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create5",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Create4 ::= Index Identificador On object Create5 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create4",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Create3 ::= NonClustered 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create3",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Create3 ::= Clustered 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create3",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Create2 ::= Create3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create2",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Create2 ::= Unique Create3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create2",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Create1 ::= Create2 Create4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create1",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Create1 ::= Database object 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create1",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Create1 ::= User object 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create1",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Create1 ::= Table Create11 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Create1",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opcionCreate ::= Create Create1 FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionCreate",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Programa2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Programa2 ::= opcionTruncate Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Programa2 ::= opcionDrop Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Programa2 ::= opcionSelect Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Programa2 ::= opcionInsert Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Programa2 ::= opcionCreate Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Programa ::= opcionTruncate Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= opcionDrop Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= opcionSelect Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= opcionInsert Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

