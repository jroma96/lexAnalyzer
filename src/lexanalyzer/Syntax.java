
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 28 18:19:33 CST 2019
//----------------------------------------------------

package lexanalyzer;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 28 18:19:33 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\002\000\002\004\011\000\002\062\002\000\002" +
    "\062\004\000\002\063\005\000\002\063\002\000\002\055" +
    "\004\000\002\055\004\000\002\055\007\000\002\061\003" +
    "\000\002\061\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\056\005\000\002\056\005\000\002\056" +
    "\010\000\002\056\004\000\002\056\002\000\002\057\004" +
    "\000\002\060\006\000\002\060\002\000\002\007\006\000" +
    "\002\005\003\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\033" +
    "\003\000\002\034\005\000\002\034\003\000\002\041\004" +
    "\000\002\041\006\000\002\041\010\000\002\042\005\000" +
    "\002\042\007\000\002\042\011\000\002\042\002\000\002" +
    "\037\005\000\002\037\003\000\002\040\006\000\002\040" +
    "\003\000\002\051\003\000\002\051\005\000\002\051\007" +
    "\000\002\052\004\000\002\052\002\000\002\035\005\000" +
    "\002\035\003\000\002\045\004\000\002\043\005\000\002" +
    "\043\002\000\002\036\005\000\002\036\003\000\002\044" +
    "\005\000\002\044\003\000\002\046\004\000\002\047\004" +
    "\000\002\047\002\000\002\010\011\000\002\010\005\000" +
    "\002\011\004\000\002\011\003\000\002\012\004\000\002" +
    "\012\004\000\002\013\003\000\002\013\005\000\002\013" +
    "\007\000\002\013\011\000\002\014\010\000\002\014\003" +
    "\000\002\015\012\000\002\015\016\000\002\016\003\000" +
    "\002\016\005\000\002\016\007\000\002\016\003\000\002" +
    "\017\006\000\002\017\003\000\002\020\004\000\002\021" +
    "\005\000\002\021\002\000\002\022\004\000\002\022\003" +
    "\000\002\023\007\000\002\023\007\000\002\023\007\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\002\000\002\025\007\000\002\025\007\000\002\025" +
    "\007\000\002\025\002\000\002\026\003\000\002\026\003" +
    "\000\002\026\005\000\002\026\004\000\002\026\005\000" +
    "\002\026\004\000\002\026\004\000\002\026\003\000\002" +
    "\026\005\000\002\054\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\031\007\000\002\032\003" +
    "\000\002\032\003\000\002\032\002\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\012\015\004\020\005\023\012\101\010\001" +
    "\002\000\042\004\255\005\257\006\254\012\243\044\247" +
    "\047\256\050\242\051\253\052\260\065\347\070\352\071" +
    "\346\072\356\073\345\074\353\075\350\001\002\000\014" +
    "\017\166\021\167\024\160\025\170\047\147\001\002\000" +
    "\014\002\uffde\015\uffde\020\uffde\023\uffde\101\uffde\001\002" +
    "\000\014\002\ufff8\015\004\020\005\023\012\101\010\001" +
    "\002\000\004\063\145\001\002\000\014\002\ufff8\015\004" +
    "\020\005\023\012\101\010\001\002\000\014\057\032\060" +
    "\035\061\034\062\033\063\031\001\002\000\004\002\030" +
    "\001\002\000\014\002\ufff8\015\004\020\005\023\012\101" +
    "\010\001\002\000\014\002\ufff8\015\004\020\005\023\012" +
    "\101\010\001\002\000\014\002\ufff8\015\004\020\005\023" +
    "\012\101\010\001\002\000\004\002\000\001\002\000\014" +
    "\002\ufff8\015\004\020\005\023\012\101\010\001\002\000" +
    "\014\002\ufff8\015\004\020\005\023\012\101\010\001\002" +
    "\000\014\002\ufff8\015\004\020\005\023\012\101\010\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\ufff9\001\002\000\004\002\ufffa\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002\000\006" +
    "\042\120\047\116\001\002\000\004\047\112\001\002\000" +
    "\006\042\102\047\100\001\002\000\006\042\064\047\063" +
    "\001\002\000\006\042\041\047\040\001\002\000\004\046" +
    "\uffcb\001\002\000\004\046\060\001\002\000\010\046\uffca" +
    "\056\046\064\045\001\002\000\004\043\043\001\002\000" +
    "\004\046\uffcd\001\002\000\004\047\040\001\002\000\004" +
    "\046\uffce\001\002\000\004\047\053\001\002\000\004\047" +
    "\047\001\002\000\010\007\uffc9\046\uffc9\056\050\001\002" +
    "\000\004\047\051\001\002\000\006\007\uffc8\046\uffc8\001" +
    "\002\000\006\007\054\046\uffc6\001\002\000\010\007\uffca" +
    "\046\uffca\056\046\001\002\000\004\047\040\001\002\000" +
    "\004\046\uffcc\001\002\000\004\046\uffc7\001\002\000\014" +
    "\002\uffdc\015\uffdc\020\uffdc\023\uffdc\101\uffdc\001\002\000" +
    "\014\002\uff84\015\uff84\020\uff84\023\uff84\101\uff84\001\002" +
    "\000\004\046\uffbf\001\002\000\004\046\060\001\002\000" +
    "\010\007\070\046\uffba\056\071\001\002\000\004\043\066" +
    "\001\002\000\004\046\uffbd\001\002\000\004\047\063\001" +
    "\002\000\004\046\uffc0\001\002\000\004\047\063\001\002" +
    "\000\004\047\073\001\002\000\004\046\uffbc\001\002\000" +
    "\006\007\070\046\uffba\001\002\000\004\046\uffbe\001\002" +
    "\000\004\046\uffbb\001\002\000\014\002\uffda\015\uffda\020" +
    "\uffda\023\uffda\101\uffda\001\002\000\004\046\uffc4\001\002" +
    "\000\006\007\107\046\uffc1\001\002\000\004\046\060\001" +
    "\002\000\004\043\103\001\002\000\004\047\100\001\002" +
    "\000\004\046\uffc5\001\002\000\014\002\uffd9\015\uffd9\020" +
    "\uffd9\023\uffd9\101\uffd9\001\002\000\004\046\uffc3\001\002" +
    "\000\004\047\110\001\002\000\006\007\107\046\uffc1\001" +
    "\002\000\004\046\uffc2\001\002\000\004\046\uffd8\001\002" +
    "\000\004\046\060\001\002\000\014\002\uffdd\015\uffdd\020" +
    "\uffdd\023\uffdd\101\uffdd\001\002\000\004\046\uffd6\001\002" +
    "\000\010\007\125\046\uffcf\056\126\001\002\000\004\046" +
    "\060\001\002\000\004\043\121\001\002\000\004\047\116" +
    "\001\002\000\004\046\uffd7\001\002\000\014\002\uffdb\015" +
    "\uffdb\020\uffdb\023\uffdb\101\uffdb\001\002\000\004\046\uffd5" +
    "\001\002\000\004\047\134\001\002\000\004\047\127\001" +
    "\002\000\010\007\125\046\uffcf\056\131\001\002\000\004" +
    "\046\uffd4\001\002\000\004\047\132\001\002\000\006\007" +
    "\125\046\uffcf\001\002\000\004\046\uffd3\001\002\000\010" +
    "\007\125\046\uffcf\056\136\001\002\000\004\046\uffd2\001" +
    "\002\000\004\047\137\001\002\000\010\007\125\046\uffcf" +
    "\056\141\001\002\000\004\046\uffd1\001\002\000\004\047" +
    "\142\001\002\000\006\007\125\046\uffcf\001\002\000\004" +
    "\046\uffd0\001\002\000\004\002\ufffd\001\002\000\004\047" +
    "\147\001\002\000\004\046\060\001\002\000\022\004\uffb3" +
    "\022\uffb3\026\uffb3\027\uffb3\046\uffb3\056\150\066\uffb3\076" +
    "\uffb3\001\002\000\004\047\151\001\002\000\022\004\uffb2" +
    "\022\uffb2\026\uffb2\027\uffb2\046\uffb2\056\152\066\uffb2\076" +
    "\uffb2\001\002\000\004\047\153\001\002\000\024\004\uffb1" +
    "\022\uffb1\026\uffb1\027\uffb1\046\uffb1\054\uffb1\056\154\066" +
    "\uffb1\076\uffb1\001\002\000\004\047\155\001\002\000\022" +
    "\004\uffb0\022\uffb0\026\uffb0\027\uffb0\046\uffb0\054\uffb0\066" +
    "\uffb0\076\uffb0\001\002\000\014\002\uffdf\015\uffdf\020\uffdf" +
    "\023\uffdf\101\uffdf\001\002\000\004\002\ufffe\001\002\000" +
    "\004\004\340\001\002\000\004\046\uffb6\001\002\000\004" +
    "\046\060\001\002\000\010\004\225\026\224\027\226\001" +
    "\002\000\010\004\225\026\224\027\226\001\002\000\010" +
    "\004\uffae\026\uffae\027\uffae\001\002\000\010\024\160\025" +
    "\170\047\147\001\002\000\004\004\215\001\002\000\004" +
    "\004\171\001\002\000\004\052\172\001\002\000\004\007" +
    "\173\001\002\000\004\052\174\001\002\000\006\007\176" +
    "\010\175\001\002\000\004\052\207\001\002\000\006\047" +
    "\201\052\177\001\002\000\004\011\uffa8\001\002\000\004" +
    "\011\206\001\002\000\006\011\uffab\056\202\001\002\000" +
    "\004\047\203\001\002\000\006\011\uffaa\056\204\001\002" +
    "\000\004\047\205\001\002\000\004\011\uffa9\001\002\000" +
    "\010\004\uffad\026\uffad\027\uffad\001\002\000\004\010\210" +
    "\001\002\000\004\052\211\001\002\000\004\007\212\001" +
    "\002\000\006\047\201\052\177\001\002\000\004\011\214" +
    "\001\002\000\010\004\uffac\026\uffac\027\uffac\001\002\000" +
    "\004\051\216\001\002\000\004\011\217\001\002\000\012" +
    "\017\166\024\160\025\170\047\147\001\002\000\004\046" +
    "\060\001\002\000\014\002\uffb9\015\uffb9\020\uffb9\023\uffb9" +
    "\101\uffb9\001\002\000\004\046\uffb7\001\002\000\004\046" +
    "\uffa6\001\002\000\004\004\240\001\002\000\004\047\231" +
    "\001\002\000\004\046\uffa1\001\002\000\004\046\uffb5\001" +
    "\002\000\004\011\236\001\002\000\006\007\232\011\uffa3" +
    "\001\002\000\004\047\234\001\002\000\004\011\uffa5\001" +
    "\002\000\006\007\232\011\uffa3\001\002\000\004\011\uffa4" +
    "\001\002\000\006\026\224\027\226\001\002\000\004\046" +
    "\uffa7\001\002\000\030\004\255\005\257\006\254\012\243" +
    "\030\246\031\261\044\247\047\256\050\242\051\253\052" +
    "\260\001\002\000\004\046\uffa2\001\002\000\016\007\uff8a" +
    "\011\uff8a\016\uff8a\046\uff8a\076\uff8a\100\uff8a\001\002\000" +
    "\004\047\335\001\002\000\016\007\uff8e\011\uff8e\016\uff8e" +
    "\046\uff8e\076\uff8e\100\uff8e\001\002\000\004\054\uff8c\001" +
    "\002\000\006\007\262\011\uff9a\001\002\000\004\004\324" +
    "\001\002\000\004\054\322\001\002\000\006\007\262\011" +
    "\uff9a\001\002\000\016\007\uff95\011\uff95\016\uff95\046\uff95" +
    "\076\uff95\100\uff95\001\002\000\016\007\uff89\011\uff89\016" +
    "\uff89\046\uff89\076\uff89\100\uff89\001\002\000\024\004\255" +
    "\005\257\006\254\012\243\044\247\047\256\050\242\051" +
    "\253\052\260\001\002\000\024\004\255\005\257\006\254" +
    "\012\243\044\247\047\256\050\242\051\253\052\260\001" +
    "\002\000\022\007\uff94\011\uff94\016\uff94\046\uff94\054\uffb3" +
    "\056\312\076\uff94\100\uff94\001\002\000\024\004\255\005" +
    "\257\006\254\012\243\044\247\047\256\050\242\051\253" +
    "\052\260\001\002\000\016\007\uff8b\011\uff8b\016\uff8b\046" +
    "\uff8b\076\uff8b\100\uff8b\001\002\000\006\007\262\011\uff9a" +
    "\001\002\000\030\004\255\005\257\006\254\012\243\030" +
    "\303\031\305\044\247\047\256\050\242\051\253\052\260" +
    "\001\002\000\004\011\264\001\002\000\006\004\265\046" +
    "\uff96\001\002\000\030\004\255\005\257\006\254\012\243" +
    "\030\267\031\271\044\247\047\256\050\242\051\253\052" +
    "\260\001\002\000\004\046\uff9f\001\002\000\006\007\262" +
    "\011\uff9a\001\002\000\006\007\262\011\uff9a\001\002\000" +
    "\006\007\262\011\uff9a\001\002\000\004\011\273\001\002" +
    "\000\006\004\265\046\uff96\001\002\000\004\046\uff98\001" +
    "\002\000\004\011\276\001\002\000\006\004\265\046\uff96" +
    "\001\002\000\004\046\uff97\001\002\000\004\011\301\001" +
    "\002\000\006\004\265\046\uff96\001\002\000\004\046\uff99" +
    "\001\002\000\006\007\262\011\uff9a\001\002\000\006\007" +
    "\262\011\uff9a\001\002\000\006\007\262\011\uff9a\001\002" +
    "\000\004\011\uff9c\001\002\000\004\011\uff9b\001\002\000" +
    "\004\011\uff9d\001\002\000\016\007\uff90\011\uff90\016\uff90" +
    "\046\uff90\076\uff90\100\uff90\001\002\000\004\047\313\001" +
    "\002\000\022\007\uff93\011\uff93\016\uff93\046\uff93\054\uffb2" +
    "\056\152\076\uff93\100\uff93\001\002\000\004\011\315\001" +
    "\002\000\016\007\uff91\011\uff91\016\uff91\046\uff91\076\uff91" +
    "\100\uff91\001\002\000\016\007\uff8f\011\uff8f\016\uff8f\046" +
    "\uff8f\076\uff8f\100\uff8f\001\002\000\004\011\320\001\002" +
    "\000\006\004\265\046\uff96\001\002\000\004\046\uff9e\001" +
    "\002\000\024\004\255\005\257\006\254\012\243\044\247" +
    "\047\256\050\242\051\253\052\260\001\002\000\016\007" +
    "\uff8d\011\uff8d\016\uff8d\046\uff8d\076\uff8d\100\uff8d\001\002" +
    "\000\030\004\uff85\005\uff85\006\uff85\012\uff85\035\325\044" +
    "\uff85\045\327\047\uff85\050\uff85\051\uff85\052\uff85\001\002" +
    "\000\024\004\uff87\005\uff87\006\uff87\012\uff87\044\uff87\047" +
    "\uff87\050\uff87\051\uff87\052\uff87\001\002\000\024\004\255" +
    "\005\257\006\254\012\243\044\247\047\256\050\242\051" +
    "\253\052\260\001\002\000\024\004\uff86\005\uff86\006\uff86" +
    "\012\uff86\044\uff86\047\uff86\050\uff86\051\uff86\052\uff86\001" +
    "\002\000\004\011\331\001\002\000\016\007\uff88\011\uff88" +
    "\016\uff88\046\uff88\076\uff88\100\uff88\001\002\000\004\011" +
    "\333\001\002\000\006\004\265\046\uff96\001\002\000\004" +
    "\046\uffa0\001\002\000\016\007\uff92\011\uff92\016\uff92\046" +
    "\uff92\076\uff92\100\uff92\001\002\000\004\046\uffb4\001\002" +
    "\000\014\002\uffb8\015\uffb8\020\uffb8\023\uffb8\101\uffb8\001" +
    "\002\000\004\047\341\001\002\000\004\007\342\001\002" +
    "\000\004\052\343\001\002\000\004\011\344\001\002\000" +
    "\010\004\uffaf\026\uffaf\027\uffaf\001\002\000\004\004\uffea" +
    "\001\002\000\004\004\uffec\001\002\000\010\007\u0105\016" +
    "\uffe3\100\u0104\001\002\000\004\004\uffe9\001\002\000\010" +
    "\007\u0105\016\uffe3\100\u0104\001\002\000\004\004\uffed\001" +
    "\002\000\004\004\uffe8\001\002\000\004\004\377\001\002" +
    "\000\004\016\357\001\002\000\004\004\uffeb\001\002\000" +
    "\004\047\147\001\002\000\012\022\uffe0\046\uffe0\066\373" +
    "\076\uffe0\001\002\000\010\022\363\046\ufff6\076\ufff6\001" +
    "\002\000\006\046\ufff3\076\366\001\002\000\024\004\255" +
    "\005\257\006\254\012\243\044\247\047\256\050\242\051" +
    "\253\052\260\001\002\000\006\046\ufff5\076\ufff5\001\002" +
    "\000\004\046\060\001\002\000\004\077\367\001\002\000" +
    "\004\047\147\001\002\000\004\046\ufff4\001\002\000\014" +
    "\002\ufff7\015\ufff7\020\ufff7\023\ufff7\101\ufff7\001\002\000" +
    "\010\022\uffe2\046\uffe2\076\uffe2\001\002\000\004\067\374" +
    "\001\002\000\004\047\147\001\002\000\012\022\uffe0\046" +
    "\uffe0\066\373\076\uffe0\001\002\000\010\022\uffe1\046\uffe1" +
    "\076\uffe1\001\002\000\026\004\255\005\257\006\254\012" +
    "\243\044\247\047\256\050\242\051\253\052\260\065\u0102" +
    "\001\002\000\004\011\u0103\001\002\000\004\011\uffee\001" +
    "\002\000\004\011\uffef\001\002\000\010\007\u0105\016\uffe3" +
    "\100\u0104\001\002\000\004\047\u0110\001\002\000\042\004" +
    "\255\005\257\006\254\012\243\044\247\047\256\050\242" +
    "\051\253\052\260\065\u0107\070\352\071\346\072\356\073" +
    "\345\074\353\075\350\001\002\000\004\016\ufff0\001\002" +
    "\000\010\007\u0105\016\uffe3\100\u0104\001\002\000\010\007" +
    "\u0105\016\uffe3\100\u0104\001\002\000\004\004\u010a\001\002" +
    "\000\026\004\255\005\257\006\254\012\243\044\247\047" +
    "\256\050\242\051\253\052\260\065\u0102\001\002\000\004" +
    "\011\u010c\001\002\000\010\007\u0105\016\uffe3\100\u0104\001" +
    "\002\000\004\016\uffe5\001\002\000\004\016\uffe6\001\002" +
    "\000\004\016\uffe7\001\002\000\004\016\uffe4\001\002\000" +
    "\004\016\ufff1\001\002\000\004\016\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\016\002\012\004\013\005\014\006\006\007" +
    "\010\010\005\001\001\000\020\013\244\026\350\027\251" +
    "\031\243\054\247\055\354\064\353\001\001\000\014\011" +
    "\161\012\160\013\163\014\162\015\164\001\001\000\002" +
    "\001\001\000\016\003\156\004\020\005\021\006\015\007" +
    "\017\010\005\001\001\000\002\001\001\000\016\003\143" +
    "\004\020\005\021\006\015\007\017\010\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\026\004\020" +
    "\005\021\006\015\007\017\010\005\001\001\000\016\003" +
    "\016\004\020\005\021\006\015\007\017\010\005\001\001" +
    "\000\016\003\025\004\020\005\021\006\015\007\017\010" +
    "\005\001\001\000\002\001\001\000\016\003\024\004\020" +
    "\005\021\006\015\007\017\010\005\001\001\000\016\003" +
    "\023\004\020\005\021\006\015\007\017\010\005\001\001" +
    "\000\016\003\022\004\020\005\021\006\015\007\017\010" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\116\041\114\001\001\000\004\033\112" +
    "\001\001\000\006\035\100\045\076\001\001\000\010\036" +
    "\061\044\060\046\064\001\001\000\010\037\036\040\041" +
    "\051\035\001\001\000\002\001\001\000\004\065\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\043\051\035\001\001\000\002\001\001\000" +
    "\004\051\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\054\001" +
    "\001\000\002\001\001\000\006\040\055\051\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\075\001\001" +
    "\000\004\047\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\066\046\064\001\001\000\002\001\001" +
    "\000\006\044\074\046\064\001\001\000\004\046\073\001" +
    "\001\000\002\001\001\000\004\047\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\105\001\001\000\004\065\104\001\001" +
    "\000\002\001\001\000\004\045\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\123\001\001\000\004\065\122\001" +
    "\001\000\002\001\001\000\004\041\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\132\001\001\000" +
    "\002\001\001\000\004\042\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\145\001\001\000" +
    "\004\065\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\336\001\001\000\006\017\335\022\222\001\001\000\006" +
    "\017\226\022\222\001\001\000\002\001\001\000\012\012" +
    "\221\013\163\014\162\015\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\217\012\160\013\163" +
    "\014\162\015\164\001\001\000\004\065\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\240\001\001\000\004\020\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\234\001\001\000\002\001\001\000\004\022\236\001\001" +
    "\000\002\001\001\000\014\013\244\026\250\027\251\031" +
    "\243\054\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\244\026\315\027\251\031\243\054\247" +
    "\001\001\000\014\013\244\026\313\027\251\031\243\054" +
    "\247\001\001\000\002\001\001\000\014\013\244\026\310" +
    "\027\251\031\243\054\247\001\001\000\002\001\001\000" +
    "\004\024\262\001\001\000\014\013\244\026\303\027\251" +
    "\031\243\054\247\001\001\000\002\001\001\000\004\025" +
    "\265\001\001\000\014\013\244\026\267\027\251\031\243" +
    "\054\247\001\001\000\002\001\001\000\004\024\277\001" +
    "\001\000\004\024\274\001\001\000\004\024\271\001\001" +
    "\000\002\001\001\000\004\025\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\301\001\001\000" +
    "\002\001\001\000\004\024\307\001\001\000\004\024\306" +
    "\001\001\000\004\024\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\320" +
    "\001\001\000\002\001\001\000\014\013\244\026\322\027" +
    "\251\031\243\054\247\001\001\000\002\001\001\000\004" +
    "\032\325\001\001\000\002\001\001\000\014\013\244\026" +
    "\327\027\251\031\243\054\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u0111\001\001\000\002\001\001\000\004\056\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\357\057\360" +
    "\001\001\000\004\060\371\001\001\000\004\062\361\001" +
    "\001\000\004\063\364\001\001\000\014\013\244\026\363" +
    "\027\251\031\243\054\247\001\001\000\002\001\001\000" +
    "\004\065\370\001\001\000\002\001\001\000\004\013\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\374\001\001\000\004" +
    "\060\375\001\001\000\002\001\001\000\016\013\244\026" +
    "\u0100\027\251\031\243\054\247\061\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u0105\001\001\000\002\001\001\000\016\013\244\026\u0107" +
    "\027\251\031\243\054\247\064\u0108\001\001\000\002\001" +
    "\001\000\004\056\u010e\001\001\000\004\056\u010d\001\001" +
    "\000\002\001\001\000\016\013\244\026\u0100\027\251\031" +
    "\243\054\247\061\u010a\001\001\000\002\001\001\000\004" +
    "\056\u010c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FIN ::= FinSentencia 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FIN",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // S ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("S",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // S ::= Distinct 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("S",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // S ::= All 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("S",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression2 ::= Sum ParentesisA S expression ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression2",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // constant ::= Entero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constant ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constant ::= String 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expressionTemp ::= object 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expressionTemp",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expressionTemp Operador expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= Negativo expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= Positivo expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= ParentesisA expression ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= At Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= constant 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // P ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // P ::= ParentesisA expression O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // P ::= ParentesisA Null O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // P ::= ParentesisA Default O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("P",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // O ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // O ::= Comma expression O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // O ::= Comma Null O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // O ::= Comma Default O 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N ::= ParentesisA expression O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("N",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N ::= ParentesisA Null O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("N",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N ::= ParentesisA Default O ParentesisC P 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("N",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // L ::= DefaultValues 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("L",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // L ::= Values N 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("L",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // M ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("M",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // M ::= Comma Identificador M 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("M",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // columnList ::= Identificador M 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("columnList",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= L 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= ParentesisA columnList ParentesisC L 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // F ::= String 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // F ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // F ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // F ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oRowset ::= OpenRowset ParentesisA String Comma String PuntoComma String PuntoComma String Comma F ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oRowset",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oRowset ::= OpenRowset ParentesisA String Comma String Comma F ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oRowset",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rowsetFunc ::= oRowset 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("rowsetFunc",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // rowsetFunc ::= OpenQuery ParentesisA Identificador Comma String ParentesisC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("rowsetFunc",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // object ::= Identificador Punto Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // object ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // object ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // object ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("object",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // C ::= rowsetFunc E 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // C ::= object E 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // B ::= C 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("B",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // B ::= Into C 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("B",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // A ::= Insert B FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // A ::= Insert Top ParentesisA Entero ParentesisC B FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropN ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropN",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropN ::= Comma DropL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropN",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropM ::= Identificador DropN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropM",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropL ::= DropM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropL",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropL ::= Identificador Punto DropM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropL",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropE ::= DropL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropE ::= If Exists DropL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DropK ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropK",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DropK ::= Comma Identificador DropK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropK",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DropJ ::= Identificador DropK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropJ",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DropD ::= DropJ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropD",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DropD ::= If Exists DropJ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropD",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DropObject2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject2",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DropObject2 ::= Comma DropX 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject2",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DropObject ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DropObject ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DropObject ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropObject",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DropX ::= DropObject 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropX",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DropX ::= Identificador On DropObject DropObject2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropX",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DropF ::= DropX 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropF",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DropF ::= If Exists DropX 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropF",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DropH ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DropH ::= Comma Identificador Punto Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DropH ::= Comma Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DropH ::= Comma Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropH",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DropG ::= Identificador Punto Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropG",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DropG ::= Identificador Punto Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropG",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DropG ::= Identificador DropH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropG",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DropC ::= DropG 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropC",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DropC ::= If Exists DropG 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropC",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DropB ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DropB",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opcionDrop ::= Drop Database DropD FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opcionDrop ::= Drop View DropE FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opcionDrop ::= Drop Table DropC FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opcionDrop ::= Drop Index DropF FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opcionDrop ::= Drop Login DropB FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionDrop",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opcionInsert ::= A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionInsert",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opcionTruncate ::= Truncate Table object FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionTruncate",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Sel4 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel4",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Sel4 ::= Inner Join object Sel4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel4",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Sel3 ::= object Sel4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel3",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Sel2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Sel2 ::= As Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Sel2 ::= Comma AgFunction ParentesisA Sel5 ParentesisC Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Sel2 ::= Comma expression Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sel2 ::= Comma Star Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel2",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AgFunction ::= Year 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AgFunction ::= Month 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AgFunction ::= Day 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AgFunction ::= Min 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AgFunction ::= Max 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AgFunction ::= Count 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AgFunction",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sel5 ::= expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel5",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sel5 ::= Star 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel5",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sel1 ::= AgFunction ParentesisA Sel5 ParentesisC Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel1",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sel1 ::= expression Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel1",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sel1 ::= Star Sel2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel1",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sel7 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel7",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sel7 ::= Order By object 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel7",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sel6 ::= Where expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel6",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sel6 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Sel6",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opcionSelect ::= Select Sel1 From Sel3 Sel6 Sel7 FIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("opcionSelect",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Programa2 ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Programa2 ::= opcionTruncate Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Programa2 ::= opcionDrop Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Programa2 ::= opcionSelect Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Programa2 ::= opcionInsert Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa2",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Programa ::= opcionTruncate Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= opcionDrop Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= opcionSelect Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= opcionInsert Programa2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

